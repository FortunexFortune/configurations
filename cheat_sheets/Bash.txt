=========== Networking  ==================
curl ifconfig.me	# returns public ip
ifconfig		# (Obsolate) returns network info
ip addr show		# returns network info
ip a 			# for the lazy
ip route show 		# returns info on gateway
route			# returns info on gateway
routel 			# returns info on gateway
netstat -r 		# (Obsolate) returns info on gateway

nmcli			# returns network info
nmcli device show	# returns network info
hostname -I		# returns private ip address
ip n 			# reutns arp (address resolution protocol) table

host <website> 		#returns DNS name resolution
ping <ipadress> 	#checks connectivity to an ip address, used to troubleshoot network conenction
ping -c 3 <ipadress>	# used to test the reachability of a host on an Internet Protocol network.
			# -c = checks that the destination device can recive packages, in this case 3 
			
sudo netstat -tupln	# (Obsolate) Return listening ports
sudo netstat -plnt	# (Obsolate) Return listening ports

sudo ss -tl		# Return listening ports
sudo ss -ltn		# Return listening ports and process name


## To install DNS utilities on Ubuntu, use:
# apt-get install dnsutils -y
# yum install bind-utils
dig -4 <domain> 	# reutrns "A records" of the domain name

============ Users ============ 
sudo visudo 			#returns sudoers file

useradd <user>			#create user
adduser <user> 			# On Debian, administrators should usually use adduser instead of useradd
passwd <user>			#change user password
userdel -r<user>		#delete user
deluser -r <user>		#delete user
userdel -f <user>		#delete user with force
groupadd <Group>		#create group
usermod -aG <Group> <User>	#add user to a group
gpasswd -a <User> <Group>	#add user to a group	
groupdel <Group>		#Delete Group

#Cento
#NEWUSER=<user> && sudo useradd $NEWUSER  -G wheel ; sudo passwd $NEWUSER

#Ubuntu
#NEWUSER=test && sudo adduser $NEWUSER ; sudo usermod -aG sudo $NEWUSER 

#sudo useradd test && echo "test:password" | sudo chpasswd
======= Groups ===========================

sudo groupadd basket

/*Need sudo to create new group*/
/*useradd == Creates a new group*/
/*basket == the group username can be anything*/

sudo usermod -a -G basket frank

/*user mod is used to modify users*/
/*-a == appennd or add to a group*/
/*-g == change primary group */
/*-G == add user to another group wihout taking him off his primary group*/

============ SSH ============ 
#Link to ssh article:  https://www.ssh.com/ssh/keygen/
ssh-keygen   			#Creates new authentication key pairs for SSH
ssh-keygen -t rsa		#Creates new authentication key pairs for SSH with rsa algorithm
ssh user@hostname		#SSH into remote comupter
ssh -p 22 user@hostname		#SSH into remote computer via a specific port
ssh-copy-id pi@10.25.6.0	#Copies the public key to the remote computer
ssh -v user@hostname		#SSH into remote computer while returning what the client is doing
ssh user@hostname <COMMAND>	#Returns command standard-out peformed on the server to the client terminal

scp file user@hostname:/path_on_server		#Transer file from client to server
scp file user@hostname:				#Transer file from client to server HOME directory
scp -P  port file user@hostname:/path_on_server	#Transer file from client to server over specific port
scp -r dir user@hostname:/path_on_server	#Transer dirctory from client to server

scp user@hostname:/path_on_server .		#Transer file from server to client
scp user@hostname:/path_on_server /home/user	#Transer file from server to client

sshfs user@hostanme:dir_to-mount /place_to_mount_localally # Mount dir
fusermount -u /path/to/dirMounted			   # UnmountDir

============ Text ============ 
head newfile.txt		#This will display the first 10 lines of a file
tail newfile.txt		#This will display the last 10 lines of a file
touch file.txt			#Create blank files
cat file.txt 			#Read file
cat file1.txt file2.txt  	#Read files
mkdir				#maked directory
mkdir -p hello/no/yes/lol	#Creates cascade directories,directories inside directories
mv file /home/fortune/holder 	#Moves the file to the specified folder*/
mv file file2			#rename the file to hello2*/
rm 				#remove files*/
rm -rf folder 			#removes directoriey
cp  file location/path		#copy a file from a location to the other
grep  "phrase" file 		#used to look for a word or phrase in a file, it will then print the specific line  
diff file1 file2 		#analyze the 2 files and print out any line that do not match in both files

========== File Compression and Archiving  ==================
tar -cf <file> <file> Name		# Archive files
					# -c = create new archieve
					# -f = name of the archieve 
				
tar -tf <file> <file> Name	        # List archieve content
					# -t list content
					# -f = name of the archieve 
				
tar -xf <file> <file> Name       	# open archive 
					# 
				

============ Variables ============ 
VARIABLENAME=VALUE		#Assign value to variable
export VARIABLENAME		#export varaible value, allows the variable o be used in new bash instances
echo $VARIABLENAME		#returns variable value



============= Allies ==============
alias
alias hello='echo hello world'
unalias hello 

=========== Riderection  ===========
Any process that runs on the linux kernel as 3 CHANNELS called:
STDIN -->0		 	#Your Standard keyboard input
STDOUT -->1		 	#Your Standard terminal output
STDERR -->2			#Your Standard terminal Error message

echo "hello" 1>file.txt		#overwrites file by inserting the content into the first line
echo "hello" >file.txt		#overwrites file by inserting the content into the first line

echo "hello" 1>>file.txt	#create a new line and start inputing content into a new line
echo "hello" >>file.txt		#create a new line and start inputing content into a new line

zzzz 2> err.txt			#Insert error message into file by overwrting the file content
zzzz 2>> err.txt		#Insert error message into the file new line

============ Operators ======================
#link to the resource https://askubuntu.com/questions/334994/which-one-is-better-using-or-to-execute-multiple-commands-in-one-line
A; B    # Run A and then B, regardless of success of A
A && B  # Run B if and only if A succeeded
A || B  # Run B if and only if A failed
A &     # Run A in background.

prog | Prog2 | prog3		#Feeds the output of each comand or program into the next program
A & B || c			#Runs either b or c if A succeed
		
================ Permissions [ chmod ]============================
7 == is the combination of all the numbers "Read Write Execute"
6 == is the combination of 4 and 2 "Read and Write"
5 == is the combination of 4 and 1 "Read and execute"
4  == Stands for "read"
3 == is the combination of 2 and 1 "Write and Execute"
2  == Stands for "write"
1  == Stands for "execute"
0  == Stand for "No permissions"

chmod 766 file			#Chanage permssion of suer , groups and others in one go		

#	u /*user*/
#	g /*group*/
#	o /*others*/
#	-rwxr-xr-x 2
#	drwxr-xr-x 2
#	d indicates is a dirctory*/
#	r /* Stands for Read*/
#	w /* Stands for Write*/
#	X /* Stands for Execute*/
#	- /* Stands for permission not set */
__________________________

chmod o+w file		#Gives perimsion to others to write
chmod o-w file		#Takes away perimsion to others to write

=================== Procesess =================== 
ps 			#List all process that you own
ps ax			#Prints list of all process
ctrl +z 		#Used to pause a process
kill (Process_id)	#used to  kill proceses

top

============== Hardware information ==============
lscpu			#Returns- information about the cpu and processing units
hwinfo  --short		#Returns- Hardware Information
lshw -short		#Retruns - List Hardware
free -m			#Check the amount of Ram used

================ PowerOff ============================
shutdown now		#power off
shutdown -r now		#Restart
shutdown -h  now	#turn it off
shutdown +60		#power off in 1 hour
shutdown -r  +30	#Restart in half an hour
shutdown -h  +10	#Turn it off in 10 mins
init 0			#power off
init 6			#Reebot

================ File system essential ======================
pwd 			#Print my working directory
ls			#list the items in the currebt folder
ls /path/folder		#list the items in the folder of your choice*/
ls -a /path/folder	#retrun a list of all files (hiden files included)
ls -l path/folder	#returns you a detailed report of the files
cd /path/folder		#Change directory
cd ..			#Takes you up 1 director
cd .. / ..		#Takes you up 2 director
cd ~			#Takes you to the home directory
which command 		#returns comand bianry path
xxd  -b `which command` #returns hex reppresentaion of the program
xxd  `which command`	 #returns binary reppresentaion of the program


# Creates a Symbolic link
ln -s /target_Path /destination_Path
# Removes Symbolic link
unlink link name 	

================ Search files  ======================

whereis software 	# binary file directories, man page directories, and library directories
locate software		# locate command in Linux is used to find the files by name (Looks though a DB)
find software		# used to find files and directories (Looks though the file system)
which software		# used to locate the executable file associated with the given command


================ RedHat Service Tools ======================
runlevel				#Returns you current runlevel
chkconfig				#Returns runlevel services
chkconfig --list 			#Returns runlevel services
chkconfig --list serviceName		#Returns specified runlevel service
chkconfig --level 3 serviceName off	#enable/disable services ability to run when system boots on specific run levels
chkconfig --level 3 serviceName oon	#enable/disable services ability to run when system boots on specific run levels

service serviceName status 		#Returns service status 
service serviceName start		#enable/disable services ability to run 
service serviceName stop 		#enable/disable services ability to run
service serviceName restart 		#restart services 
service serviceName reload 

================ Systremd ======================
systemd-cgls 				#returns all the processes of the system
systemd-cgtop 				#returns the top cgroups accodring to their resources
systemctl status			#returns the top cgroups accodring to their resources

systemctl status serviceName		#Returns details on the service
systemctl enable serviceName		#enable service to start at boot
systemctl disable serviceName		#disbale serivce to start at boot
systemctl start serviceName		#start service now
systemctl reload serviceName		#reload service now
systemctl stop serviceName		#stop service sertvice now
systemctl help serviceName		#returns manuals of a service

journalctl				# returns system log ( jorunal ) 
journalctl -e				# jumps to the ned of the log page
journalctl -f 				# Returns realtime  log entries
journalctl -n 2 			# Retuns n number of ,ust recent entries
journalctl -r 				# Returns must recent log data
journalctl -u service_name		# Returns log related to the service selected
journalctl -o versbose 			# Returns log in a DB format
journalctl -o json-pretty		# Returns log in multi line json format 

systemd-analyze				# Returns how long it took the system to boot up
localectl 				# Retusns systmem localose and keyboard mapping
timedatectl				# view and set time zone and system time
timedatectl list-timezones 		# Return time zones available
timedatectl set-timezone "time_zone"	# Sets Sysstem time zone 
hostnamectl 				# Returns system hostname
systemd-resolve website			# Returns hostname IP adress
systmed-inhibit download file 		# Prevent the system from sleeping before finish the command passed in

============== search  ==================
which <program_name>			#returns the bianry path to the program

============== System ==================
uname  -a		#returns system info
lsb_release  -a		#returns system info
who 			#returns loggged in users
w			# returns logged in users with more details
id 			#return information on the user account
users 			#returns logged in users
users | wc -w		#returns number of logged in users
whoami 			#returns logged suer
su			#logs you to root in the current directory 
su -			#logs you to root in the root home folder
su user			#logs you to  the user in the current directory 
su - user		#logs you to the user in the user home folder


=============== EOF - Here Document  ========
# A here document is used to redirect input into an interactive shell script or program.
# https://superuser.com/questions/1003760/what-does-eof-do

# Read standard in 
grep -i hello <<EOF
hello dear
friend
EOF

# Read standard in 
wc -l << EOF
This is a simple lookup program 
for good (and bad) restaurants
in Cape Town.
EOF

# Write to a file from standard in
touch <File>
cat << EOF > /path/<File>
[nginx]
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1
EOF

==================Extras===================
( echo "Hello" ) 	#runs command in a subshell

( echo $BASH_SUBSHELL)	#runs commaind in a subshell 

CTRL + A 		#Takes you to the begining of the comand line
CTRl + E 		#Takes you to the end of the comand line
clear 			#clear the screen
Up and Down		#scroll through the commands
ctrl + r		#used after typing a comand, used to rewrite the same type of commands that was used in time past 
ctrl+c 			#interupt, it will get you out of a process 

sha256sum fileName | grep fcaf10fa60066437b20... #Compares the result of the hash operation with the original, if the output from gerp is red, then the file was not hijacked

export PS1="\e[0;31m[\u@\h \W]\$ \e[m "		#To set a red color prompt
#Link to  Promopt formatting --> https://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/

export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$"


============  Sending file via putty, from windows to linux ============ 
pscp C:\Users\fortu\Downloads\Note.sql fortune@34.244.23.180:/home/fortune
#https://it.cornell.edu/managed-servers/transfer-files-using-putty
