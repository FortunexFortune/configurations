Vagrant is a virtual machine manager. It allows you to script the virtual machine 
configuration as well as the provisioning (scripts, Chef, Puppet, Ansible ).

======== General  ========

vagrant --version         # Returns vegrant version
vagrant <command> -h      # Returns help on the selected command

======== Vagrantfile  ========
vagrant init                                    # initialize a vagrant environment by creating a vagrantfile
vagrant init -m                                 # initialize a vagrant environment by creating a vagrantfile with the minimum requiremnts

vagrant init hashicorp/bionic64                 # Create a base Vagrantfile:
vagrant init -m hashicorp/bionic64              # Create a minimal Vagrantfile (no comments or helpers)

vagrant init -m bento/ubuntu-20.04              


======== Mangaging the box  ========
## Remember taht a <hostname> can be specifiedas part of the following commands

vagrant up                       # Creates and configure machine according to your Vagrantfile, brings up halt vms
vagrant halt                     # shuts down 1 or more machines

vagrant suspend                  # saves our virtual environment at the current point-in-time, then stops the machine
vagrant resume                   # resume supsended vm 

vagrant destroy                  # used to destroy the environment 
vagrant destroy -f               # used to destroy the environment 
vagrant validate                 # validates vagrant file
vagrant reload                   # Reboots the system, use it after alteraing the Vagrant file
vagrant reload <id> --provision  # Reboots the system and also run provisioner
vagrant status                   # returns the state of the machine present in the current workplace
vagrant global-status            # returns the state of the machine present in the system
vagrant status <hostname>        # returns state of the specified vm
vagrant global-status --prune    # clear status log
vagrant provision                # runs any configured provisioners
vagrant up --color  --provision  # runs any configured provisioners with color
vagrant box add ubuntu/bionic64  # add box localy

vagrant port                     # returns port mapping
vagrant port <machine>           # returns port mapping


vagrant upload <source> <destination> [hostname]   # upload file from host to vm


======== Snapshot  ========
--save and restore  method --
# You can either use this method or the other, not both

vagrant snapshot save <snapshot_name>                # takes snapshot of the virtual mcahine
vagrant snapshot save <vm_name> <snapshot_name>      # takes snapshot of a specific box
vagrant snapshot save default <snapshot_name>        # takes snapshot of a specific box
vagrant snapshot list                                # list snapshoes

vagrant snapshot restore <snapshot_name>             # restore snapshots
vagrant snapshot restore default <snapshot_name>     # restroe specific snapshot

vagrant snapshot delete <snapo_name>                 # delete snapshot (halt the box before deleting for a quickker process)



--push and pop  method --
# You can either use this method or the other, not both
# you can not  define the name of the machine  you want to save or the name of the snapshot
# similar to git stash 
# ideal for quick save and restore

vagrant snapshot push                            # takes a snapshot
vagrant snapshot list                            # list snapshoes
vagrant snahphot pop                             # restore the snaphost and removes it from snaphsot list




======== plugins  ========

vagrant plugin list
vagrant plugin install <plugin_name>
vagrant plugin update <plugin_name>

vagrant plugin repair <plugin_name>   # vagrant will attempt to repair faulty plugin 

vagrant plugin license <licesnse_file>

vagrant plugin uninstall <plugin_name>

vagrant plugin expunge                # repairs all plugins
vagrant plugin expunge --reinstall    # repairs and reinstall plugins 

## Useful plugins

vagrant plugin install vagrant-vbguest   # adds VirtualBox Guest Additions to our guest systems
vagrant plugin install vagrant-winnfsd   # for windows users, NFS support
vagrant plugin install vagrant-hostmanager # manipulate our /etc/hosts file before provisioning

vagrant plugin install vagrant-netinfo    # shows us the ports that are mapped to our hos
vagrant plugin install vagrant-git        # lets you deploy and clone code from Git to your guests

https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins

======== ssh  ========
vagrant ssh               # SSH into a vagrant box, used for single guest in an enverioment 
vagrant ssh <hostname>    # With the hostname being the name of the virtual machine as provided in the Vagrantfile. Generally, this is used when we have a multi-machine setup
vagrant ssh -c "ls /"     # Returns ssh comand to hostm machine
vagrant ssh -c "Command"  # Returns ssh comand to hostm machine
vagrant ssh-config        # Returns info on ssh setup
ssh -p 2222 vagrant@127.0.0.1

======== Boxes  ========

vagrant box list

            add
            list
            outdated
            prune
            remove
            repackage
            update



=============================================================
Providers
=============================================================
https://www.vagrantup.com/docs/providers/

# Before you can use another provider, you must install it. 
# Installation of other providers is done via the Vagrant plugin system

#A provider is responsible for the lifecycle of a resource: 
#create, read, update, delete. An example of a provider is AWS,
#which can manage resources of type aws_instance, aws_eip, aws_elb, etc.


 https://app.vagrantup.com/boxes/search
