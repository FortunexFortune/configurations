============= Git configuration  ====================

git config -l                                 # returns git environment settings
git config --list                             # returns git environment settings  
git config --list --show-origin

git config --global user.name <username>      # sets global git credentials
git config --global user.email <email_addr>   # sets global git credentials

git config user.name "Your Name Here"         # sets local git credentials, will affect woring directory only
git config user.email your@email.com          # sets local git credentials, will affect woring directory only

git config --system core.editor vim           # set editor for git
git config --global core.editor emac          # set editor for git


# Alternatively, you may store system-wide configuration values in the file directly:
#– /etc/gitconfig which corresponds to --system
#– ~/.gitconfig or ~/.config/git/config which corresponds to --global
#– .git/config in a repository which corresponds to --local
#– Note: Files lower in the list override files higher in the list.


============= Repository Basics ===============

git init                     # initalize a git repository
git init <path>

git add <filename>           # adds a specific file to staging
git add .                    # adds all files to staging

git status                   # returns items in staging area
git status -v                # returns items with a verbose output, changes included
git status -s                # returns items in staging area in shortened version
                             # A --> staged itemes  
                             # ?? --> unstaged items
                             # AM --> staged but has been modified, changes need to be re added 
                             # D --=> item has beend delated
                 
                 
git rm <fileName>            # removes a file from working direcotry
git rm -f <fileName>         # removes a file from working direcotry with force

git rm --cached <fileName>    # untrack, unstage file 
git rm --cached <fileName> -f # untrack, unstage file 


git commit                   # commit items in staging area
git commit -m "text"         # commits the changes
git commit -a -m "text"      # stage and commit cahnges
git checkout -- d_file       # brings back previosly commited file that was deleted

git log
git log --oneline             # return abbreviated log info
git log -p                    # returns detailed info 
git log -1 --pretty=%H        # returns the last commit hash 
git log -- <filename>         # returns information on a particular file
git log --oneline <filename>  # returns information on a particular file



============== Cloning and Pushing =========================

git clone repouURL                                                                        # clone repo 
git clone repoURl <path>                                                                  # clones a local repo to a specific path
git clone user@server:<original_repo_path_relative_to_user_home> <local_repo_path>        # cloning over ssh  
git clone --single-branch --branch master https://<url>                                   # clone single branch


git push origin master                                                                    # pushing changes to origin repository
git push origin --all                                                                     # pushes all barnaches ot the origin

git remote add origin https://github.com/user/repo.git                                    # Set a new remote
git remote -v   # Verify new remote

================== Branches =====================

git branch <new branch>       # Create a branch
git branch -a                 # returns list of all branches
git branch -D <branch>        # deltes the branch 
git checkout <branch>         # switches you to the new branch
git checkout -b <new branch>  # creates and checks you out the new branch
git merge <branch>            # merges the selected branch to your current branch
git push origin --delete <new branch> # delete remote branch


git branch -a                      # list local branches
git branch -r                      # list remote branches
git branch -d <name>               # Delete local branch 
git push origin --delete <name>    # Deleting remote branch



=============== Merging branches ===========================

git checkout -b  feature/login
git checkout develop
git merge feature/login
git branch -d new-feature  # delete branch


=============== tags ===========================
git tag                                 # erturns working diretory tags
git tag -a <name> -m "message"          # create annotated tag
git tag <name> -m "message"             # create lightweight tag
git tag -d <name>                       # Delete a tag      
git show <tagName>                      # return tag commit info









