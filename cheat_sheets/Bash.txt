explorer .										# git bash open file explorer

 export test=$( curl https://jsonplaceholder.typicode.com/todos/1 |  jq '.id' )
 
=========== Networking  ==================
# apt install iproute2 net-tools


routel			# return route tables

curl ifconfig.me	# returns public ip
ifconfig		# (Obsolate) returns network info

# ip
ip a 			# the new substitue for ifonfig
ip r			# returns info on gateway 
ip n 			# reutns arp (address resolution protocol) table
ip addr show		# returns network info
ip link			# retruns netwoork interfaces
ip route show 		# returns info on gateway

ip addr add 192.168.1.10/24 dev eth0        # giving nic an ip
ip route add 192.168.2.0/24 via 192.168.1.1 # adding a route to routing table
ip route add default via 192.168.1.1 	    # route all request to unkwon netowrks via gateway
ip route show default

sudo ip addr del 172.18.0.1/16 dev br-ecb66ec30f7e  # Generally used for autogenerated ips like the ones docker create
sudo ip addr del <ip/cidr> dev <nicName>


ip link set <nic> up		# start interface
ip link set <nic> down		# shutdown interface

# route
route			# returns info on gateway
routel 			# returns info on gateway

# netstat/ss
netstat -r 		# (Obsolate) returns info on gateway
netstat -rn

sudo netstat -tuplna	# (Obsolate) Return listening ports
			-t - Show TCP ports.
			-u - Show UDP ports.
			-n - Show numerical addresses instead of resolving hosts.
			-l - Show only listening ports.
			-p - Show the PID and name of the listener’s process. This information is shown only if you run the command as root or sudo user.
			-a - returns all results

sudo ss -tl			# Return listening TCP ports
sudo ss -tunlpa			# Return listening TCP ports and process name
sudo ss -luntpa | grep -i dhc	# Return dhclient listening port 

# ifconfig

ifconfig nic down		# shutdown interface
ifconfig nic up			# start interface

# nmcli

nmcli			# returns network info
nmcli device show	# returns network info
nmcli device status

# ping

ping <ipadress> 	# checks connectivity to an ip address, used to troubleshoot network conenction, return "ECHO reply requests"
ping -c 3 <ipadress>	# used to test the reachability of a host on an Internet Protocol network.
			# -c = checks that the destination device can recive packages, in this case 3 
			# Erros
			# https://www.onlinecomputertips.com/support-categories/networking/277-ping-error-messages

ping -i 0.1 <ip>	# ping every 0.1 sec, requires sudo to run


# extra
hostname -I		# returns private ip address
host <website> 		# returns DNS name resolution

			
traceroute <ip>		# return complete route the packet is taking to reach the target destination 
                      	# ideally used when ping is faling, helps to debug where exatcly the request is g eeting stuck

			
# nmap
nmap <ip>			# scans most common 1000 ports 
nmap -p {port} {host}		# ping and test for a specific port
nmap -p {port1,port2} {host}    # scans specific ports
nmap -p {port} -sV {host}	# scans for a specific port. v --> returns verbose output by describing the running services
nmap -p- {host}			# scans all ports, can take a long time, by pressing ENTER you can get scan percentage

nmap -sS {host}			# TCP syn scan, most popular scan option, "STEALTH SCAN”
				# This is the default scan for root users (needs root)
				# It is fast and able to scan 1000s of ports x sec if there are no firewall restircting it
				# Refered to as the half open scan cause it does no open a full TCP connection
				# This starts the TCP 3 way handshake, but does not complete this handshake 
				# https://uwnthesis.wordpress.com/2013/06/11/how-to-use-nmap-scanner-which-is-the-right-scan-to-use/
				
nmao -sT {host}			# TCP Connect scan
				# This is the default scan for none root users
				# This scan completes the TCP 3 way handshake 

nmap -sU {host}			# udp port scanning, slower and more difficult than tcp

nmap -sn {subent}		# icmp scanning, scans network and dispaly info on its hosts 
nmap -sP <subent>		# icmp scanning, scan network and return all connected devices (ping all subnet devices)
nmap -sP 192.168.0.74/24	# icmp scanning, scan network and return all connected devices (ping all subnet devices)

# netcat

nc -l 2399			# Server side - server listens on selected port
nc localhost 2399		# Client side - client communicate to server on selected port

nc -l 2399 Hello Server		# Server sidee	- Server listens on selected port with message
nc localhost 2399 Hello Server	# Client side - client sends message to server over specfific port

nc -z -v site.com		# run a basic port scan of the specified website or server. Netcat will return verbose results with lists of ports and statuses. 

nc -v -n 8.8.8.8 1-1000		# basic port scan command for an IP ncat address

nc -zv site.com 80 		# – scan a single port
nc -zv hostname.com 80 84 	# – scan a set of individual ports
nc -zv site.com 80-84 		# – scan a range of port

nc -v -w5 -z portquiz.net 7999		# got this bad boy from Altaf

nc -z -n -v 192.168.0.173 1-1000 2>&1 | grep succeeded  # scans a range of ports

# tcpdump
tcpdump -h 	# returns version 
tcpdump tcp output -->  [timestamp] [protocol] [source_ip.source_protocol] > [destination_ip.destination_port]: Flag.. , [Seq_number]
TCP Flags --> [S]=SYN  [.]=ACK   [S.]=SYNACK [F]=Finish  [R]=SET  [P]=PUSH  [U]=URGENT

tcpdump -D			# returns all Nic
tcpdump -i any			# any interface is a psudo interface used to capture traffic from all interfaces
tcpdump -i eth1			# capture all traffic from eth1, is good practice to specify the nic we want 
tcpdump -i any -c 5		# -c --> stops capturing after n number of packets
tcpdump -i any -c 5 -n		# -n --> converts service name or hostname to ips / port numbers, tcpdump triggers dns trffic to peform this
tcpdump -i any -c 5 -v		# -v --> verbose
				# -vvv --> up to a level of 3 times verbosy can be specified
				
tcpdump -i any -c 5 -q		# q --> quite, provide minumm amount of info
tcpdump  tcp -n 		# capture traffic on tcp traffic
tcpdump  icmp -n 		# capture traffic on icmp traffic

tcpdump -n port 80 		# capture traffic to port 80

tcpdump  host {ip} -n		# capture traffic between host, incoming and outgoing
tcpdump  src {ip} -n		# captures only incoming traafic from src
tcpdump  dst {ip} -n		# captures only ourgoing traafic to dst
tcpdump  net {subnet} -n	# captures subnet traffic


tcpdump -i eth0 -v 'src port 443 and dst 192.168.1.107'


tcpdump -n -w  /path/to/file.pcap -i etho0 -v 'tcp and net 192.168.1.0/24'	# -w --> capture traffic and write it to file
									 	# -v --> useful when capturing to a file
										
										
tcpdump -n -r /path/to.file.pcap | less						# read captured file

# extra
			
telnet {host} {port}


# Nslookup - Name Server Lookup
nslookup <domain>					# queries DNS server and returns IP adress of a website -  will display the “A Record” (IP Address)
							# https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples/
nslookup 192.168.0.10 					# Reverse DNS lookup
nslookup -type=any google.com
nslookup -type=soa redhat.com
nslookup -type=ns google.com
nslookup -type=a google.com
nslookup -type=mx google.com
nslookup -type=txt google.com

# DIG - Domain Information Groper
dig							# return root servers	
							# https://phoenixnap.com/kb/linux-dig-command-examples
dig <domain>						# perform a DNS lookup on domain name
dig -4 <domain> 					# returns "A records" of the domain name
dig @8.8.8.8 google.com					# Use the following command to specifya custom domain server
dig google.com MX					# (Query MX records
dig hostinger.com txt 					# (Query TXT record)
dig hostinger.com cname 				# (Query CNAME record)
dig hostinger.com ns 					# (Query NS record)
dig hostinger.com A 					# (Query A record)
dig google.com ANY					# returns all of the results of the query

dig google.com +short					# return only ip address of the hostname 
dig google.com +trace					# sts each different server the query goes through to its final destination. 
							# Use this command option to identify the IP address where traffic is dropping

dig -x 172.217.14.238					# Rever DNS lookup -  look up a domain name by its IP address

 dig +trace www.example.com				# trace dig 	

sudo dhclient -r		# release ip address 
sudo dhclient 			# restarts dhc client 

dhclient -v enp0s8		# I ussed this command to help my VM dinf the DHCP server
dhclient -v <Nic>		# I ussed this command to help my VM dinf the DHCP server


# IP forwarding 

sysctl net.ipv4.ip_forward								# Get current state of IP forwarding
cat /proc/sys/net/ipv4/ip_forward							# Get current state of IP forwarding

echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf && sysctl -p	# Enable IP Forwarding method 1
											# https://gist.github.com/iamcryptoki/ed6925ce95f047673e7709f23e0b9939
echo 1 > /proc/sys/net/ipv4/ip_forward							# Enable IP Forwardingmethod 2

echo 0 > /proc/sys/net/ipv4/ip_forward							# Disable IP Forwarding method 1


============ Users ============ 
sudo visudo 			#returns sudoers file

useradd <user>			#create user
adduser <user> 			# On Debian, administrators should usually use adduser instead of useradd
passwd <user>			#change user password
userdel -r<user>		#delete user
deluser -r <user>		#delete user
userdel -f <user>		#delete user with force
groupadd <Group>		#create group
usermod -aG <Group> <User>	#add user to a group
gpasswd -a <User> <Group>	#add user to a group	
groupdel <Group>		#Delete Group

usermod -u 2005 foo		# To assign a new UID to user called foo (chnages user id)
groupmod -g 3000 foo		# To assign a new GID to group called foo (chagnes group id)


useradd -r		# Create a system account, System users will be created with no aging information in /etc/shadow, no home directory for such an user
			# You have to specify the -m options if you want a home directory for a system account
useradd --system	# Create a system account, System users will be created with no aging information in /etc/shadow, no home directory for such an user
			# You have to specify the -m options if you want a home directory for a system account




#User creaion in Centos
NEWUSER=<user> && sudo useradd $NEWUSER  -G wheel ; sudo passwd $NEWUSER

#User creaion in Ubuntu
NEWUSER=test && sudo adduser $NEWUSER ; sudo usermod -aG sudo $NEWUSER 


======= Groups ===========================

sudo groupadd basket

/*Need sudo to create new group*/
/*useradd == Creates a new group*/
/*basket == the group username can be anything*/

sudo usermod -a -G basket frank	

/*user mod is used to modify users*/
/*-a == appennd or add to a group*/
/*-g == change primary group */
/*-G == add user to another group wihout taking him off his primary group*/

============ Cryptography ============ 

Symmetric 

	AES (reccomended)
	DES (Do not use this)

Assymetric 

	RSA with at least 2048 bits reccomended)
	Eliptic curve  reccomended)


============ SSH ============ 
#Link to ssh article:  https://www.ssh.com/ssh/keygen/
# General  ssh things
ssh-keygen   						#Creates new authentication key pairs for SSH
ssh-keygen -t rsa -b 4096				#Creates new authentication key pairs for SSH with rsa algorithm
ssh-keygen -f ~/dir/dishout-ssh-keys -t rsa -b 4096	#Creates new authentication key pairs for SSH with rsa algorithm

ssh user@hostname		#SSH into remote comupter
ssh -p 22 user@hostname		#SSH into remote computer via a specific port
ssh-copy-id pi@10.25.6.0	#Copies the public key to the remote computer

ssh -v user@hostname		#SSH into remote computer while returning what the client is doing
ssh -v computer@somehost
ssh -vv computer@somehost
ssh -vvv computer@somehost

ssh user@hostname <COMMAND>	#Returns command standard-out peformed on the server to the client terminal

# Port fowarding 
# https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot
ssh -p <REMOTE_HOST_SSH_PORT> -L <LOCAL_PORT>:<TARGET_HOST>:<TARGET_PORT> <REMOTE_USER>@<REMOTE_HOST>	# ssh local port fowarding
ssh -L <LOCAL_PORT>:<TARGET_HOST>:<TARGET_PORT> <REMOTE_USER>@<REMOTE_HOST>				# ssh local port fowarding
ssh -p 8011 -L 8080:172.20.0.1:4200 ubuntu@184.34.4.4							# ssh local port fowarding
ssh -L 80:intra.example.com:80 gw.example.com

ssh -D 9000 -C ubuntu@179.32.9.6 -p 2222	# Socks proxy via ssh Dynamic tunnel setup
ssh -D 9000 -C ubuntu@179.32.9.6 		# Socks proxy via ssh Dynamic tunnel setup

# Copying
scp file user@hostname:/path_on_server		#Transer file from client to server
scp file user@hostname:				#Transer file from client to server HOME directory
scp -P  port file user@hostname:/path_on_server	#Transer file from client to server over specific port
scp -r dir user@hostname:/path_on_server	#Transer dirctory from client to server

scp user@hostname:/path_on_server .		#Transer file from server to client
scp user@hostname:/path_on_server /home/user	#Transer file from server to client

sshfs user@hostanme:dir_to-mount /place_to_mount_localally # Mount dir
fusermount -u /path/to/dirMounted			   # UnmountDir


# ssh agent
eval `ssh-agent`				# run ssh-agent 
echo $SSH_AGENT_SOCK				# can be used to check if agent is running 

ssh-add -l					# list in memory keys (by default )
ssh-add /path/to/private_key			# addes private key to memory, next time you peform ssh you don't need to specify key path 
						# ssh will try and use keys that have been added to memory when attempting authT
						# you can specify as many private keys as you want
ssh -A user@hostanme				# forwards keys in memory to actual server, hence allowing you to use keys added via ssh-add from the machine you logged into

# ssh bastian / jump host
https://www.tecmint.com/access-linux-server-using-a-jump-host/
https://smallstep.com/blog/ssh-agent-explained/

ssh -J host1 host2
ssh -J username@host1:port username@host2:port
ssh -J username@host1:port,username@host2:port username@host3:port	# The same syntax can be used to make jumps over multiple servers.


ssh-keygen -R <ServerIp or HostName>		# Fixing the WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 
~.						# (tilde + period) escape from a dead ssh connection

============ Text ============ 
head newfile.txt		# This will display the first 10 lines of a file
tail newfile.txt		# This will display the last 10 lines of a file
tail -f /log			# Monitor Logs in Real Time
sudo tail -n2 -f /log		# Monitor Logs last n lines in Real Time

touch file.txt				# Create blank file
cat file.txt 				# Read file
cat file1.txt file2.txt  		# Read files
mkdir					# maked directory
mkdir -p hello/no/yes/lol		# Creates cascade directories,directories inside directories
mv file /home/fortune/holder 		# Moves the file to the specified folder*/
mv file file2				# rename the file to hello2*/
rm 					# remove files*/
rm -rf folder 				# removes directoriey
cp  file location/path			# copy a file from a location to the other
grep  "phrase" file 			# used to look for a word or phrase in a file, it will then print the specific line  
grep -vE "string one|string two"	# used to exlude input lines that contain the select string

diff file1 file2 			# analyze the 2 files and print out any line that do not match in both files
diff -qr directory-1/ directory-2/ 	# returns diff between dirs, r = rescurive and q = returns only differenes

========== File Compression and Archiving  ==================
tar -cf <file> <file> Name		# Archive files
					# -c = create new archieve
					# -f = name of the archieve 
				
tar -tf <file> <file> Name	        # List archieve content
					# -t list content
					# -f = name of the archieve 
				
tar -xf <file> <file> Name       	# open archive 
					
	
tar -czvf file.tar.gz folder_to_zip 	# tar.gz an entire folder (archieve and comprime)
tar -xf Rese.tar.gz			# unzip tar.gz

gunzip file.gz 		# compress
gzip -d file.gz		# decomporess


# https://www.geeksforgeeks.org/cut-command-linux-examples/
cut -f 1 state.txt		# cut field n from string  , space is implied as the delimiter 
cut -d "-" -f 1 state.txt	# cut field n from string  , specify the delimiter -
cut -d " " -f 1-4 state.txt	# cut filed 1 to 4 

				

============ Variables ============ 
VARIABLENAME=VALUE		#Assign value to variable
export VARIABLENAME		#export varaible value, allows the variable o be used in new bash instances
echo $VARIABLENAME		#returns variable value



============= Allies ==============
alias
alias hello='echo hello world'
unalias hello 

=========== Riderection  ===========
Any process that runs on the linux kernel as 3 CHANNELS called:
STDIN -->0		 	#Your Standard keyboard input
STDOUT -->1		 	#Your Standard terminal output
STDERR -->2			#Your Standard terminal Error message

echo "hello" 1>file.txt		#overwrites file by inserting the content into the first line
echo "hello" >file.txt		#overwrites file by inserting the content into the first line

echo "hello" 1>>file.txt	#create a new line and start inputing content into a new line
echo "hello" >>file.txt		#create a new line and start inputing content into a new line

zzzz 2> err.txt			#Insert error message into file by overwrting the file content
zzzz 2>> err.txt		#Insert error message into the file new line

command > file-name 2>&1.               # outputs both stderr and output into a file 
SomeCommand 2>&1 | tee SomeFile.txt	# outputs both stderr and output displayed on the console and in a file
SomeCommand 2>&1 | tee -a log

> test.conf				# wipe content from a file
 cat /dev/null > test.conf		# wipe content from a file

============ Operators ======================
#link to the resource https://askubuntu.com/questions/334994/which-one-is-better-using-or-to-execute-multiple-commands-in-one-line
A && B  # AND LIST - Run B if and only if A succeeded 
A || B  # OR LIST  - Run B if and only if A failed
A; B    # Run A and then B, regardless of success of A
A &     # Run A in background.

prog | Prog2 | prog3		#Feeds the output of each comand or program into the next program
A & B || c			#Runs either b or c if A succeed




# File test operators
# https://linuxize.com/post/bash-check-if-file-exists/

-b FILE - True if the FILE exists and is a special block file.
-c FILE - True if the FILE exists and is a special character file.
-d FILE - True if the FILE exists and is a directory.
-e FILE - True if the FILE exists and is a file, regardless of type (node, directory, socket, etc.).
-f FILE - True if the FILE exists and is a regular file (not a directory or device).
-G FILE - True if the FILE exists and has the same group as the user running the command.
-h FILE - True if the FILE exists and is a symbolic link.
-g FILE - True if the FILE exists and has set-group-id (sgid) flag set.
-k FILE - True if the FILE exists and has a sticky bit flag set.
-L FILE - True if the FILE exists and is a symbolic link.
-O FILE - True if the FILE exists and is owned by the user running the command.
-p FILE - True if the FILE exists and is a pipe.
-r FILE - True if the FILE exists and is readable.
-S FILE - True if the FILE exists and is a socket.
-s FILE - True if the FILE exists and has nonzero size.
-u FILE - True if the FILE exists, and set-user-id (suid) flag is set.
-w FILE - True if the FILE exists and is writable.
-x FILE - True if the FILE exists and is executable.

   -a file
          True if file exists.
   -b file
          True if file exists and is a block special file.
   -c file
          True if file exists and is a character special file.
   -d file
          True if file exists and is a directory.
   -e file
          True if file exists.
   -f file
          True if file exists and is a regular file.
   -g file
          True if file exists and is set-group-id.
   -h file
          True if file exists and is a symbolic link.
   -k file
          True if file exists and its ``sticky'' bit is set.
   -p file
          True if file exists and is a named pipe (FIFO).
   -r file
          True if file exists and is readable.
   -s file
          True if file exists and has a size greater than zero.
   -t fd  True if file descriptor fd is open and refers to a terminal.
   -u file
          True if file exists and its set-user-id bit is set.
   -w file
          True if file exists and is writable.
   -x file
          True if file exists and is executable.


# https://www.cyberciti.biz/faq/check-if-a-directory-exists-in-linux-or-unix-shell/

test -d "DIRECTORY" && echo "Found/Exists" || echo "Does not exist"
[ -d "DIR" ] && echo "yes" || echo "noop"

# Comparison Operators
https://tldp.org/LDP/abs/html/comparison-ops.html

================ Permissions [ chmod ]============================
7 == is the combination of all the numbers "Read Write Execute"
6 == is the combination of 4 and 2 "Read and Write"
5 == is the combination of 4 and 1 "Read and execute"
4  == Stands for "read"
3 == is the combination of 2 and 1 "Write and Execute"
2  == Stands for "write"
1  == Stands for "execute"
0  == Stand for "No permissions". 

chmod 766 file			# Change permssion of suer , groups and others in one go		
chmod -R 777 /www/store		# REcorsively change permssion of folder

#	u /*user*/
#	g /*group*/
#	o /*others*/
#	-rwxr-xr-x 2
#	drwxr-xr-x 2
#	d indicates is a dirctory*/
#	r /* Stands for Read*/
#	w /* Stands for Write*/
#	X /* Stands for Execute*/
#	- /* Stands for permission not set */
__________________________

chmod o+w file		#Gives perimsion to others to write
chmod o-w file		#Takes away perimsion to others to write

__________________________

chown <userName>: file   # changes user  ownership of a file
chown :<groupName> file  # changes group ownership of a file
chgrp <groupName> file	 # changes group ownership of a file

# The only user that can change user permission on a file is Root


=================== Procesess =================== 
ps aux  | grep -i process
				-a lists processes started by all users
				-x also lists processes started at boot like daemons
				-u will add columns with additional information on each process
				
ps -ef  | grep -i process	# To see every process on the system using standard syntax

				PID - The process ID. Usually,
				TTY - The name of the controlling terminal for the process.
				TIME - The cumulative CPU time of the process, shown in minutes and seconds.
				CMD - The name of the command that was used to start the process.
				
				
				TIME is a measure of actual CPU time being used, 
				not elapsed time since the process started. 
				If the process is essentially idle, TIME will not increment much

ctrl +z 		#Used to pause a process
kill (Process_id)	#used to  kill proceses

top
htop 			' https://www.youtube.com/watch?v=Qw2ZUf0hTF8&t=22s

============== Hardware information ==============
lscpu			#Returns- information about the cpu and processing units
hwinfo  --short		#Returns- Hardware Information
lshw -short		#Retruns - List Hardware
free -m			#Check the amount of Ram used (Phsyscal ram and Swap)

================ PowerOff ============================
shutdown now		#power off
shutdown -r now		#Restart
shutdown -h  now	#turn it off
shutdown +60		#power off in 1 hour
shutdown -r  +30	#Restart in half an hour
shutdown -h  +10	#Turn it off in 10 mins
init 0			#power off
init 6			#Reebot 

================ File system essential ======================

pwd 			#Print my working directory
ls			#list the items in the currebt folder
ls /path/folder		#list the items in the folder of your choice*/
ls -a /path/folder	#retrun a list of all files (hiden files included)
ls -l path/folder	#returns you a detailed report of the files
ls -t			# sort by date
ls -tr			# sort by reverse date 
ls -lh			# return file with size in human format
cd /path/folder		#Change directory
cd ..			#Takes you up 1 director
cd .. / ..		#Takes you up 2 director
cd ~			#Takes you to the home directory
cd -			#Takes you to the previous directory
which command 		#returns comand bianry path
xxd  -b `which command` #returns hex reppresentaion of the program
xxd  `which command`	 #returns binary reppresentaion of the program


# Creates a Symbolic link
ln -s /target_Path /destination_Path
# Removes Symbolic link
unlink link name 	

================ Search files  ======================

whereis software 	# binary file directories, man page directories, and library directories
locate software		# locate command in Linux is used to find the files by name (Looks though a DB)
find software		# used to find files and directories (Looks though the file system)
which software		# used to locate the executable file associated with the given command

===================== Powering off ===================
init 0
init 6
shutdown -h +15 "Shutting down in 15 minutes2
shutdown -r +10 "Rebooting in 10 minutes."


============== System ==================
uptime  		# returns the system uptime from last booted
uname  -a		#returns system info
lsb_release  -a		#returns system info
mokutil --sb-state	# check if ssecure boot in enabled 
who 			#returns loggged in users
w			# returns logged in users with more details
id 			#return information on the user account
users 			#returns logged in users
users | wc -w		#returns number of logged in users
whoami 			#returns logged suer
su			#logs you to root in the current directory 
su -			#logs you to root in the root home folder
su user			#logs you to  the user in the current directory 
su - user		#logs you to the user in the user home folder



watch date		# execute a command repeatedly so as to track any change in output (every 2 sec)
watch -d date		# highlight the part of output that's changing between updates
watch -n 5 date		#  customize update interval
watch -t date		# turn off the header in output
watch -g free		# watch' command to exit after a change in output is detected
	
watch 'COMMAND_1 | COMMAND_2'	# run watch for command that requires Pipes 


============== Storage ==================


lsblk			# list block devices
mkfs.ext4 /dev/sdb1	# Format the new partition using Ext4.
df -T			# returns block devices  with format type

df -h 	/mnt/SDS_data_small/ # Return disk space in human readable format
df -BM  /mnt/SDS_data_small/ #  Return disk space in MB
df -BG  /mnt/SDS_data_small/ #  Return disk space in GB
df -TM  /mnt/SDS_data_small/ #  Return disk space in TB



du -h /home/tecmint 	# returns the size of each file inside the target folder
du -mh /home/tecmint

du -sh /file/path	# returns size of folder in GB
du -shk /file/path	# returns size of a folder in KB
du -shm /home/tecmint	# returns size of a folder in MB


	-c 		# Retruns also gran total 
	-h 		# How to view disk usage in human readable format
	-s 		# size
	-r		# sort by file or folder size
	
du -sh /var/lib/docker/* | sort -rh	# return size and sort

# Monitor Progress of Copy Command
cp ubuntu-15.10-desktop-amd64.iso /home/tecmint/ &			# Copy with this conmmand
watch -n 0.1 du -s /home/tecmint/ubuntu-15.10-desktop-amd64.iso 	# Monitor destination folder 



# Find folder taking space 
https://maryrosecook.com/blog/post/freeing-disk-space-on-your-linux-server

=============== EOF - Here Document  ========
# A here document is used to redirect input into an interactive shell script or program.
# https://superuser.com/questions/1003760/what-does-eof-do

# Read standard in 
grep -i hello <<EOF
hello dear
friend
EOF

# Read standard in 
wc -l << EOF
This is a simple lookup program 
for good (and bad) restaurants
in Cape Town.
EOF

# Write to a file from standard in
touch <File>
cat << EOF > /path/<File>
[nginx]
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1
EOF


================= installing software ==========

# Debian / Ubuntu
# https://help.ubuntu.com/community/AptGet/Howto
# https://www.cyberciti.biz/howto/question/linux/dpkg-cheat-sheet.php

sudo apt install <packageName>	# install a debian deb package
sudo apt remove <packageName>	# remove a debian deb package
sudo apt purge <packageName>    # removes everything related to a package including the configuration files. Configs in ~ are not usually affected by this command.
sudo apt autoremove		# This command removes packages that were installed by other packages and are no longer needed.
sudo apt-get autoclean		# This command removes .deb files for packages that are no longer installed on your system. 
			        # removing these files from /var/cache/apt/archives may regain a significant amount of diskspace.

sudo apt list  <packageName>			# list all avaible apt  packages for your os (not all are neccesary installed)
sudo apt list --installed			# list installed packages
sudo apt list --installed <packageName>		# list installed packages

sudo apt search <search term>	# will find all the packages containing your search term
sudo apt show <package_name>    # If you want to know more about a package before installing or removing it,

sudo apt-cache search <search_term> # Each package has a name and a description. This command lists packages whose name or description contains <search_term>.
sudo dpkg -l *<search_term>*        # This will find packages whose names contain <search_term>. 
                                    # Similar to apt-cache search, but also shows whether a package is installed on your system 
				    # by marking it with ii (installed) and un (not installed).		    

apt-cache show <package_name>       # This command shows the description of package <package_name> and other relevant information including version, size, dependencies and conflicts.


sudo apt-mark hold kubelet kubeadm kubectl	# put's packages on hold meaning you can not update the package
sudo apt-mark showhold 				# view hold packages
sudo sudo apt-mark unhold <package name>	# unhold pacakges

sudo apt install -f                             # This command does the same thing as Edit->Fix Broken Packages in Synaptic.
						# Do this if you get complaints about packages with "unmet dependencies".

{
sudo apt install path_to_deb_file
sudo dpkg -i path_to_deb_file
sudo apt install -f					
}

dpkg -r program_name  # remove package


apt-key add					# adds a package key
apt-key list					# This will list the keys added		
apt-key del 30C18A2B				# remove the key 		

================ RedHat Service Tools ======================
runlevel				#Returns you current runlevel
chkconfig				#Returns runlevel services
chkconfig --list 			#Returns runlevel services
chkconfig --list serviceName		#Returns specified runlevel service
chkconfig --level 3 serviceName off	#enable/disable services ability to run when system boots on specific run levels
chkconfig --level 3 serviceName oon	#enable/disable services ability to run when system boots on specific run levels

service serviceName status 		#Returns service status 
service serviceName start		#enable/disable services ability to run 
service serviceName stop 		#enable/disable services ability to run
service serviceName restart 		#restart services 
service serviceName reload 
sudo service --status-all 		# List all running services 

================ systemd ======================
systemd-cgls 				# returns all the processes of the system
systemd-cgtop 				# returns the top cgroups accodring to their resources
systemctl status			# returns the top cgroups accodring to their resources

systemctl status serviceName		# Returns details on the service
systemctl enable serviceName		# enable service to start at boot
systemctl disable serviceName		# disbale serivce to start at boot
systemctl start serviceName		# start service now
systemctl reload serviceName		# reload service now
systemctl stop serviceName		# stop service sertvice now
systemctl help serviceName		# returns manuals of a service
systemctl daemon-reload			# Reload dependeccy tree, use it after modyfing a unit file
systemd-delta				# Returns modified unit files

systemctl is-active application.service
systemctl is-enabled application.service
systemctl is-failed application.service
systemctl list-units				# list of all of the active units that systemd knows about

systemctl list-units --all --state=inactive
systemctl list-units --type=service
systemctl list-unit-files
systemctl list-unit-files | grep enabled

systemctl cat application.service		# Cat unite file 
systemctl list-dependencies sshd.service	# Returns unit's dependency tree
systemctl edit <applciation.unit>		# creates a drop-in unit
systemctl edit --full <applciation.unit>	# creates a drop-in unit

journalctl				# returns system log ( jorunal ) 
journalctl -e				# jumps to the ned of the log page
journalctl -f 				# Returns realtime  log entries
journalctl -n 2 			# Retuns n number of ,ust recent entries
journalctl -r 				# Returns must recent log data
journalctl -u service_name		# Returns log related to the service selected
journalctl -o versbose 			# Returns log in a DB format
journalctl -o json-pretty		# Returns log in multi line json format 

localectl 				# Retusns systmem localose and keyboard mapping
timedatectl				# view and set time zone and system time
timedatectl list-timezones 		# Return time zones available
timedatectl set-timezone "time_zone"	# Sets Sysstem time zone 
hostnamectl 				# Returns system hostname

systemd-analyze				# Returns how long it took the system to boot up
systemd-resolve website			# Returns hostname IP adress
systmed-inhibit download file 		# Prevent the system from sleeping before finishing the command passed in


systemctl list-unit-files -t target	# returns all target unit files
systemctl list-units -t target		# Reutrns active target units
systemctl get-default			# return default target
systemctl set-default <target.unit>	# change deafult target to specified target
systemctl isolate <target.unit>		# change system to specified target

systemctl rescue			# change system to run level 1
systemctl reboot			# run reboot target unit 
systemctl poweroff			# run reboot target unit


sudo systemctl status {firewalld,iptables} # returns the running services

====================== Script =====================
#Used to record shell sessions
script 			# start recording
script 	<fileName>	# start recording into a filename
exit			# ends the recorind


script <fileName> --timing=time.log	# start replayble recording
scriptreplay -s <fileName> -t time.log	# replay replayable recording

script -c "netstat -tupln" netstat.log	# write outpuut into log file

================== Cron ================== 
# https://crontab.guru/
crontab -l 		# return user cronjobs
crontab -e		# edit croontab
crontab -u <user> -e	# edit user crontab
sudo contabl -l 	# returns root crontab
sudo crontab -e
crontab -r		# removes crontab for user


# template
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                       7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  command_to_execute

# The following will run on the 1st and the 15th of the month
# 0 0 1,15 * *  command_to_execute

# The following will run the command every 10 mins
# */10 * * * *  command_to_execute

# The following will run the command every 3 days
# 0 0 */3 * *  command_to_execute

# The following will run the command from midnight to 5 am of every day
# 0 0-5 * * *  command_to_execute

# The following will run the command every 30 min Mon to Frid from 9am-5pm
*/30 9-17 * * 1-5 command_to_execute

###### Sample crontab ######

# Empty temp folder every Friday at 5pm
0 5 * * 5 rm -rf /tmp/*

# Backup images to Google Drive every night at midnight
0 0 * * * rsync -a ~/Pictures/ ~/Google\ Drive/Pictures/


================== Rsync ===================
You may have noticed that there is a trailing slash (/) at the end of the first argument in the below commands:
This is necessary to mean “the contents of dir1”. The alternative, without the trailing slash, would place dir1, including the directory, within dir2.

rsync -a dir1/ dir2 		 # -a -> It stands for “archive” and 
				 syncs recursively
				 preserves symbolic links
				 special and device 
				 files
				 modification times
				 group
				 owner
				 permissions.




rsync -anvP --delete  /mnt/SDS_data/ /mnt/SDS_data_small/			# sync data (copy) 
rsync -anv dir1/ dir2
rsync -a --include='*.sql' --exclude='*' /home/ubuntu/dir/  <hostName>@<ip>:/tmp/ 	# Rsync over ssh, rsync specific files

-n or –dry-run					# Dry run
-v 						# versbose


rsync -a --exclude '.git'  ~/git/kds_scripts/ /tmp/serv4eo-processing/					# sync data but exclude a specific file or folder 
rsync -a --exclude 'file1.txt' --exclude 'dir1/*' --exclude 'dir2' src_directory/ dst_directory/	# Exclude Multiple Files or Directories
rsync -a --exclude={'file1.txt','dir1/*','dir2'} src_directory/ dst_directory/				# Exclude Multiple Files or Directories, bracket styles

# Rsync rsync options 
# https://linuxize.com/post/how-to-exclude-files-and-directories-with-rsync/



sudo rsync -avl --dry-run --stats --size-only /mnt/dir1 /mnt/dir2			# Returns all files which differ in size from the 2 directories 




================== Mounting ===================

sudo mount -t cifs -o username={{username}},password={{password}} //172.16.0.34/AtlasData/KORE/data_unit_tests  /mnt/atlas_kore/
sudo umount -f -l  /mnt/folder

# NFS
sudo mount serverIP:/exportFolder_server /mnt/mountfolder_client
showmount -e 192.168.1.12	# Run this on the client
sudo umount /mnt/myfolder



================== Encryption ===================
# https://www.cyberciti.biz/tips/linux-how-to-encrypt-and-decrypt-files-with-a-password.html
# https://devhints.io/gnupg

# Adding gpg keys to gitlab
# https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/


gpg --gen-key							# (asymmetric encryption) generate gpg keys
gpg --full-gen-key						# same as --gen-key but used for a full featured key generation dialog


gpg --list-secret-keys 						# list keys
gpg --list-secret-keys --keyid-format LONG 			# list keys
gpg --list-secret-keys --keyid-format LONG <your_email>		# list keys
gpg -k								# list keys


gpg --armor --export 30F2B65B9246B6CA				# Export the public key of that ID (replace your key ID from the id you got from listing keys)
								# the GPG key ID that starts with sec.




gpg --armor --output pubkey.txt --export 'Adrian'		# (asymmetric encryption) export pub key to a file
gpg --armor --output privkey.asc --export-secret-keys 'Adrian'	# (asymmetric encryption) export private key to a file
gpg --encrypt --recipient 'Adrian' hiddenmessage.txt		# (asymmetric encryption) encrypt file with the adrian public key
gpg --output decrypted.txt --decrypt hiddenmessage.txt.gpg	# (asymmetric encryption) dencrypt file with the adrian public key



gpg -c filename				# (symmetric encryption) Encrypt  
gpg myfinancial.info.txt.gpg		# (symmetric encryption) Decrypt
gpg -o outputFile fileToDecrypt.gpg	# (symmetric encryption Decrypt gpg content to destination file
echo RELOADAGENT | gpg-connect-agent	# reload gpg agent, clear it's cache, hence it will forget passoword
gpg -d myfinancial.info.txt.gpg		# Decrypt
gpg --decrypt myfinancial.info.txt.gpg	# Decrypt


==================== Swap ============================

cat /proc/sys/vm/swappiness	# Returns swapiness level
sudo sysctl vm.swappiness=10 	# Change swappines level
sudo smem -nk
sudo smem -p
sudo smem --processfilter="firefox"
sudo swapoff -a
sudo swapon -a
sudo swapon --show	# return swap location

=================================
== Find
=================================
https://www.tecmint.com/35-practical-examples-of-linux-find-command/amp/
https://unix.stackexchange.com/questions/12902/how-to-run-find-exec

# type
find .					# finds all files and dir below current directory
find dir				# finds all files and dir below specified directory
find . -type d				# finds all directory under specified directory
find . -type f				# finds all files under specified directory
find . -type f	--name "fileName"	# finds all files under specified directory with specified name
find . -type f	--name "fileN*"		# finds all files under specified directory with wildcard name
find . -type f	--iname "fileN*"        # finds all files under specified directory with wildcard name, iname makes it case insensitive

# min
find . -type f -mmin 10			# find all files modified 10 mins ago
find . -type f -mmin -10	        # find all files modified less than 10 mins ago
find . -type f -mmin +10	        # find all files modified more than 10 mins ago
find . -type f -mmin +1 -mmin -5	# returns file modified more than 1 m ago and less than 5 age	

# days
find . -type f -mtime 20		# find file modified 20 days ago
find . -type f -mtime -20		# find file modified less than 20 days ago
find . -type f -mtime +20		# find file modified more than 20 days ago


# size

find . -size +5M			# returns file over 5mb
find . -size +5k			# returns file over 5kb
find . -size +5G			# returns file over 5gb


# empty
find . -empty 				# returns all empty files


# permissions 

find . -perm 777 			# find all files with specific permission


# exec
# used to peform action on returned results

=================================================
===== Background (bg) and Foreground (fg)
=================================================

ctrl+z 			# sends process to the backgound, useful for things like vim and htop
sleep 20 &		# sends process to the backround 
			
jobs			# list background processes with their ids
fg 			# bring backgound process to the front (must recent one)
fg job_id		# bring up specific backgound job
bg			# show backround job

####################################
#### EXTRA
####################################


==================BASH===================

echo $?			# return exit status of previuos command, 0 = sucess , 1 = error, >1 = other special error
$VAR			# returns value of var
$?   			# returns status code of previous command
$#   			# retruns number of arguments that were presented to the script
$( ls )			# command substistution
( echo "Hello" ) 	# runs command in a subshell
( echo $BASH_SUBSHELL)	# runs commaind in a subshell 

command > /dev/null 2>&1 & 	# run command in the backgorund 
jobs -l				# display the status of all stopped and background jobs in the current shell session:


who am i	# retrun info on logged in user
tty		# return ty info

sudo update-alternatives --config editor	# Set default text editor
sudo visudo 					# open sudoers file
export VISUAL=vim; visudo			# change default editor to open visudo


cat <(echo hey there)		 # Process Substitution -  this outputs: hey there
echo <(echo hey there) 		 # Process Substitution -  this outputs: /dev/fd/63   (the tmp file where the result is stored in)


==================DIFF===================


https://researchhubs.com/post/computing/linux-cmd/compare-the-content-of-files.html#:~:text=If%20you%20want%20to%20compare,and%20file2%20on%20the%20right.

diff <(ls /bin) <(ls /usr/bin)	 # process Substitution 

sdiff -s file1 file2			# returns lines that differ (It does not display the identical identical lines)
sdiff -o OutFile file1 file2		# Creates a third file, specified by the OutFile variable, 

================== Demoggification  ==================

Process of removing unsless use of CATS or other commands 

cat /etc/passwd | grep rob   # rather than doinf this do the commnad below
grep rob /etc/passwd	     # clener and more optimal command than the one above

==================File manipulation===================
# https://victoria.dev/blog/how-to-replace-a-string-with-sed-in-current-and-recursive-subdirectories/

sed -i -e 's/sudo//g'  <fileName>		# removes instace of word in file
sed -i -e 's/\(sudo\|-E\)//g' <fileName>	# remove instaces of different words in a file




================== Shell Expansion ==================
sudo mkdir /mnt/{dir1,dir2,dir3,dir3}  # create multiple dir under /mnt


============  Sending file via putty, from windows to linux ============ 
pscp C:\Users\fortu\Downloads\Note.sql fortune@34.244.23.180:/home/fortune #  https://it.cornell.edu/managed-servers/transfer-files-using-putty

=================== customzie OS =====================

export PS1="\e[0;31m[\u@\h \W]\$ \e[m "		#To set a red color prompt
#Link to  Promopt formatting --> https://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/

export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$"
export PS1="\[\033[00;32m\]\u\[\033[00;36m\]@\h: \[\033[00;33m\]\W \[\033[00;32m\]\$\[\033[00m\]"

setxkbmap -layout us  # set keyboard to us
setxkbmap -layout gb  # set keyboard to gb


================== Multiline commands Bash ===================


# Multiline command, allows you to execute 1 command by using new lines
docker create \
  --name=duckdns \
  -e PUID=1000 `#optional` \
  -e PGID=1000 `#optional` \
  -e TZ=Europe/London \
  -e SUBDOMAINS=subdomain1,subdomain2 \
  -e TOKEN=token \
  -e LOG_FILE=false `#optional` \
  -v /path/to/appdata/config:/config `#optional` \
  --restart unless-stopped \
  linuxserver/duckdns

# Multiline command, allows you to execute a bunch of commands in one go
{
  tar -xvf etcd-v3.3.9-linux-amd64.tar.gz
  sudo mv etcd-v3.3.9-linux-amd64/etcd* /usr/local/bin/
}


================== Extras ===================


CTRL + A 		# Takes you to the begining of the comand line
CTRl + E 		# Takes you to the end of the comand line
CTRL + L		# clear the screen
clear 			# clear the screen
reset 			# resets the screen
Up and Down		# scroll through the commands
ctrl + r		# used after typing a comand, used to rewrite the same type of commands that was used in time past 
ctrl+c 			# interupt, it will get you out of a process 


!! 			# run last command 
sudo 			# run last command with sudo

!history_number		# re runs command from history

mount | column -t	# format command output in columns 
command | column -t	# format command output in columns 

================== BASH vars ===================

export HISTCONTROL=ignoreboth			# A value of ignoreboth is shorthand for ignorespace and ignoredups
export HISTCONTROL=ignoreboth:erasedups		# 
export HISTTIMEFORMAT="%d/%m/%y %T "		# add time info to hisory commands

================== Utilities  ===================


# curl
curl example.com							 
curl -o vue-v2.6.10.js https://cdn.jsdelivr.net/npm/vue/dist/vue.js	# save output to file
curl -O https://cdn.jsdelivr.net/npm/vue/dist/vue.js			# Uppercase -O saves the file with its original filename:

curl -I <host or IP> 							# Curls the header of the target ip

curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' https://example.com/contact.php
curl -X POST -F 'image=@/path/to/file.jpg' <host or IP>			# upload a file


curl --cacert cacert.pem https://daniel.haxx.se				# specify the cacert

# grep
grep -o					# -o returns the match cahraters only and not the entire line
grep -P					# perl regular experssion
grep -c "echo" FILE			#  This will output the number of lines that contain your search string.
grep -r 'myString' .			# search the current directory for all files having the a string
grep -r --include=*.{cc,h} "hello" . 	# search recursively (in all sub directories also) for all .cc OR .h files that contain "hello" at this . (current) directory





================== unsorted  ===================



sha256sum fileName | grep fcaf10fa60066437b20... # Compares the result of the hash operation with the original, if the output from gerp
						 # is red, then the file was not hijacked


echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf	# Appends input to output file

VBoxManage modifyhd KoreVM-disk001.vdi --resize 50000	# virtualbbox



find /mnt/SDS_data  -type f -mtime -8 >> newFiles.txt	

tree --du -h /opt/ktube-media-downloader		# Returns tree output with size information
sudo  tune2fs -l /dev/nvme2n1 | grep Block		# returns block size of the mountpoint



# unattended upgrades

 systemctl list-timers apt-daily.timer			# How to tell when unattended upgrades will run today
 /var/log/unattended-upgrades/

command & # This command will let your command run in background, but will be killed when current session closed.
nohup <command> <args> ><filename> 2>&1 &  # This command will continue running even the terminal session ends.


dmesg 		# used to display the kernel related messages on Unix like systems. retrieve its data by reading the kernel ring buffer.
dmesg -wH	# get kernel logs in real time in human readable format


echo  'linuxhint.com' | base64
echo 'bGludXhoaW50LmNvbQo=' | base64 --decode
echo -n "insert value: " 	# pint on standard out witout going to a new line 

cat fortune.csr | base64 | tr -d "\n"		# convert to base 64 and get rids of new lines




figlet TecMint.com	# Text Banners in Terminal
			# https://www.tecmint.com/create-ascii-text-banners-in-linux-terminal/


# AWK in action 
k get svc -A  | grep -i load | awk '{print $1, $2, $3, $6}' | column -t		# awks is used to output colmun 1,2,3 and 6 of the kubectl output






==================  xarg  ==================

# Remove all your local git branches but keep master
git branch | grep -v "master" | xargs git branch -D  		

# Run comand against all entries in echo command 
echo -n "pods-service-daemonset" | xargs -d - -I{} kubectl auth can-i delete {} --as cirium_developers --namespace atomicus-feature-aosom-138

export GOOGLE_CREDENTIALS=$(cat ../secrets | jq -c )





# Unattended upgrades 

sudo dpkg-reconfigure -plow unattended-upgrades

cat /var/log/unattended-upgrades/ 

