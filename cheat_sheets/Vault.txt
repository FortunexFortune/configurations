# Vault

# Restarting vault
sudo systemctl stop vault
consul kv delete -recurse vault/
sudo systemctl start vault
vault operator init 


==============================
= ENV VARS
==============================
export VAULT_ADDR='http://127.0.0.1:8200'
export VAULT_TOKEN="something"

==============================
= dev mode  
==============================
vault server -dev -dev-root-token-id="root-token"

==============================
= Starting  
==============================

vault operator init                     # Initialize vault server 
                                        # returns 5  unseal keys - any 3 of these can be used to unseal the vault server 
                                        # return initial root token
                                       
vault status                            # return status of vault server
                                        # run this to check if it's sealed or unsealed
                                        
vault operator unseal key1              # unseal vault by using any of the 3 unseal keys 
vault operator unseal key2
vault operator unseal key12


vault login                             # authenticates users or machines to Vault using the provided arguments 
                                        # prompots you to insert a vault token
                                        
vault login token                       # Not secure, cause the token is left in the history

==============================
= Working with secrets  
==============================
vault secrets list                      # list secrets 

vault secrets enable -path=<secret_path> <secret_engine>      # Create secret path for a specific engine 
vault secrets enable -path=my_key_values kv                   # Create secret path for a specific engine 
vault secrets disable my_key_values                           # Disbale secret path
                                                              # When a secrets engine is disabled, all secrets are revoked and the corresponding Vault data and configuration is removed.


# KV

vault kv put <secret_path>/<secret_name> <key>=<value>        # Create kv secret
vault kv get <secret_path>/<secret_name>                      # Get kv secret
vault kv delete <secret_path>/<secret_name>                   # Delete kv secret

vault secrets enable -path=my_secrets kv                      # Enable kv secret path
vault kv put my_secrets/db password=root99                    # Create kv secret
vault kv get my_secrets/db                                    # Get kv secret
vault kv delete my_secrets/db                                 # Delete kv secret
vault kv undelete -version number my_secrets/db               # undelete kv secret


vault secrets enable kv                            # Enables the secrets engine for KV version 1.
vault secrets enable kv-v2                         #  Enables the secrets engine for KV version 2.
vault secrets enable -path=local kv                # Enables the secrets engine for KV version 1 with a custom mount point.
vault secrets enable -path=local kv2 -version=kv   # Enables the secrets engine for KV version 2 with a custom mount point.


vault kv put kv/webblog/mongo key1=value1 key2=value2                # write with v1
vault kv put kv-v2/webblog/mongo data.key1=value1 data.key2=value2   # write with v2


vault kv get kv/webblog/mongo                                        # vault read v1
vault kv get kv-v2/webblog/mongo                                     # vault read v2



==============================
= Authentication  
==============================
# Token
vault token create                                            # crate token
vault token revoke <token>                                    # revoke token
vault token create -policy="policy_name"                      # create a token with a policy attached


# User and password
vault auth enable userpass                                    # enable userpass auth
vault auth disable userpass                                   # disable userpass auth
vault write auth/userpass/users/mitchellh password=foo        # create user password 
vault login -method=userpass username=mitchellh               # authenticate via user passwor authT

# JWT
vault auth enable jwt                                                             # enable jwt auth 
vault write -field=token auth/jwt/login role=myproject-staging jwt=$CI_JOB_JWT    # create token for Auth 
  
vault write auth/jwt/config \
    jwks_url="https://gitlab.example.com/-/jwks" \
    bound_issuer="gitlab.example.com"
    
==============================
= Policy
==============================
vault policy write <policy_name> policy_name.hcl              # add policy to vault
vault write auth/userpass/users/sam/policies policies=sam     # attach policy to user or entity
vault list auth/{auth_method}/role                            # list roles



vault token create -orphan -policy my-policy -ttl 30m        # create orphan token  


==============================
= token
==============================

vault token lookup root 
vault token revoke 96ddf4bc-d217-f3ba-f9bd-017055595017
vault token create -policy=my-policy -policy=other-policy
vault token lookup -accessor 9793c9b3-e04a-46f3-e7b8-748d7da248da     # Get information about a token via its accessor:
vault token capabilities <secret_path/something/ok>                   # returns the capabilities the vault token has over that path 
vault token revoke -self                                              # revoke current auth token



==============================
= user passs
==============================

vault write auth/userpass/users/bob password=bobtest123
vault policy write bob ./bob-policy.hcl
vault write auth/userpass/users/bob/policies policies=bob

vault token capabilities secret/foo                        # view what a token can access

==============================
= App role 
==============================

vault auth enable approle                                                                       # create approle
vault policy write jenkins ./jenkins-policy.hcl                                                 # create policy
vault write auth/approle/role/jenkins token_policies="jenkins" token_ttl=1h token_max_ttl=4h    # attach policy to role
vault read auth/approle/role/jenkins                                                            # verify role
vault read auth/approle/role/jenkins/role-id                                                    # Get the RoleID 
vault write -force auth/approle/role/jenkins/secret-id                                          # Get secret role id
vault write auth/approle/login role_id=<role-id> secret_id=<secret-id>                          # Login with RoleID and SecretID





=============================
= API
=============================
# DO NOT ACCESS API via HTTP, TLS should be enabled
# https://www.vaultproject.io/api
# Check the sidebar

# Check if vault has been Initialize 
curl -s -H 'Accept: application/json' \
-H "Authorization: Bearer ${TOKEN}" \
https://vault.development-aws.fortunetech.dev/v1/sys/init | jq '.'

# Enable secret path 
vault secrets enable -path=/fortune_secrets/db kv

    
# Creating a secret
curl -s \
    -H "Authorization: Bearer ${TOKEN}" \
    -H "Content-Type: application/json" \
    -X POST \
    -d '{"password":"secure222"}' \
    https://vault.development-aws.fortunetech.dev/v1/fortune_secrets/db/creds | jq '.'
    
    
# Getting a secret 
curl -s -H 'Accept: application/json' \
    -H "Authorization: Bearer ${TOKEN}" \
    https://vault.development-aws.fortunetech.dev/v1/fortune_secrets/db/creds| jq '.'
    
    
# Deleting a secret 
curl -s -H 'Accept: application/json' \
    -H "Authorization: Bearer ${TOKEN}" \
    --request DELETE \
    https://vault.development-aws.fortunetech.dev/v1/fortune_secrets/db/creds | jq '.'

# Listing secrets 
curl -s -H 'Accept: application/json' \
    -H "Authorization: Bearer ${TOKEN}" \
    -X LIST \
    https://vault.development-aws.fortunetech.dev/v1/fortune_secrets/db/ | jq '.'
    
        
# Creating a Token 
cat << EOF > payload.json
{
   "policies":[
      "root"
   ],
   "meta":{
      "user":"test-user"
   },
   "ttl":"lh",
   "renewable":true
}
EOF

curl -s \
    -H "Authorization: Bearer ${TOKEN}" \
    -H "Content-Type: application/json" \
    -X POST \
    -d @payload.json \
    https://vault.development-aws.fortunetech.dev/v1/auth/token/create | jq '.'
    
    
    
# Get metadata info about your token 
curl -s \
    -H "Authorization: Bearer ${TOKEN}" \
    -H "Content-Type: application/json" \
    https://vault.development-aws.fortunetech.dev/v1/auth/token/lookup-self | jq '.'
    
    

==============================
= Extra  
==============================

https://www.vaultproject.io/docs/commands
