#######################################
## Aliases
######################################
alias k='kubectl'   # my alias
po                  # pods
deploy              # deployment
svc                 # service
ns                  # namespace
netpol              # ntetowk policy
pv                  # persistent volume
pvc                 # persistent volume claims
sa                  # service accounts
rs                  # replicaset
cm                  # configmaps
ep                  # endpoints
no                  # nodes
ds                  # daemonsets
sc                  # storage class

# https://kubernetes.io/docs/reference/kubectl/overview/

#######################################
## System
######################################
# node monitor period = 5s            # how often nodes get monitored by the api server
# node monitor grace period = 40 s    # after how long ...
# pod eviction  time outs = 5m        # after how long ...

kubectl cluster-info                        # returns info on where the master and DNS is running


kubectl get all                                        # returns all objects
kubectl get all -n <nameSpace>
kubectl get all --all-namespaces

kubectl explain <object>                               # Explain resource (help)
kubectl explain <object>  --recursive                  # Explain resource and recusrvly reutns object properties  (help)

kubectl explain persistentvolumes.spec.hostPath        # Explain resource (help)

sudo systemctl status kubelet                             # check status of the service

kubectl create -f .                                       # create all objects in manifets 
kubectl create -f <file.yaml>                             # create k8 object
kubectl create -f <file.yaml>  --namespace=dev            # create object within namesapce
kubectl apply -f o.yam  -n=kube-system                          # create object within namesapce

kubectl get componentstatus                 # returns compoenets status
kubectl api-resources -o wide               # get all resource avaible on your cluster

kubectl get roles,rolebindings --namespace ingress-space # query multiple resource types

########################
# kubeconfig
########################
kubectl cluster-info                                        # useful to run this after you setup the kubeconfig file, can debug error with this

kubectl config view                                     # returns brief configuration of your cluster. clusater contexts, users and default context
kubectl config view --kubeconfig=/root/my-kube-config   # view kubeconfig from specific source                                           
      
kubectl config get-contexts                          # display list of contexts 
kubectl config current-context                       # display the current-context

kubectl config use-context <contextName>        # swtich kube context
kubectl config use-context user1@prodCluster    # switch kube context
kubectl config --kubeconfig=/root/my-kube-config use-context research  # switch kube context

kubectl config view -o jsonpath='{.users[].name}'    # display the first user
kubectl config view -o jsonpath='{.users[*].name}'   # get a list of users


########################
# Redirect output
########################

kubectl get nodes -o yaml > nodes.yaml
kubectl get nodes -o json > nodes.json


########################
# Auth
########################
kubectl auth can-i <verb> <resource> 
kubectl auth can-i list pods 
kubectl auth can-i delete nodes
kubectl auth can-i list pods --as dev-user
kubectl auth can-i list pods --as dev-user --namespace test

########################
# proxy
########################
kubectl proxy   `               # will start a proxy on port 8081 wchich read direct request to the api server, it uses information sotred in the kubeconfigfor authentication 
                                # client will then make call -->  curl <k8s_ip>:8081 -k

#######################################
# Pods
######################################

kubectl get pods                            # returns running pods
kubectl get pods -o wide                    # returns ip address of your pods
kubectl get pods -n <name>                  # get pods belonging to a namespace
kubectl get pods --namespeces=<name>        # get pods belonging to a namespace
kubectl get pods --all-namespeces           # get pods across all namespaces
kubectl get pods --all-namespeces -o wide   # get pods across all namespaces with more details

kubectl describe pods
kubectl describe pod nginx
kubectl delete pod nginx
kubectl describe pods  --all-namespaces     # get Information about pods across all name spaces

kubectl get pods  --show-labels             # returns pods and their labels
kubectl get pods --selector key=value       # returns pods with specfic labels
kubectl get pods  -l key=value,key2=value2  # returns pods with specfic labels


kubectl get pods/<podname> -o yaml          # return yaml of a pod state

kubectl edit pod <podName>                  # k8 updates the pod and updates it in real time

#######################################
## Clustering and Nodes
######################################

kubectl get nodes                   # Get a list of nodes
kubectl describe nodes              # get Information about nodes
kubectl describe node $node_name    # Get more information about a specific node

#######################################
## Deployments
######################################

kubectl get deployments                         # returns your deployments
kubectl get deployment <name> -o yaml           # returns the complete yaml of the deployment (COMPLETE)

kubectl describe deployment nginx-deployment    # return more info related to the deployment
kubectl delete deployment nginx                 # delete deployments

kubectl rollout history deployment/<name>   # return history of rollout
kubcetl rollout status deployment/<name>    # return staus of rollout
kubectl rollout undo deployment/<name>      # roll bacl to previous deployment version


# Check the Rollout History of a Deployment
kubectl rollout history deployment/<Deployment-Name>
kubectl rollout history deployment/my-first-deployment  

# Edit Deployment
kubectl edit deployment/<Deployment-Name> --record=true
kubectl edit deployment/my-first-deployment --record=true

# Verify Rollout Status 
kubectl rollout status deployment/my-first-deployment


# List Deployment History with revision information
kubectl rollout history deployment/my-first-deployment --revision=1
kubectl rollout history deployment/my-first-deployment --revision=2
kubectl rollout history deployment/my-first-deployment --revision=3


# Undo Deployment - roll back to previous revision 
kubectl rollout undo deployment/my-first-deployment                    

# Rollback Deployment to Specific Revision
kubectl rollout undo deployment/my-first-deployment --to-revision=3

# Rolling Restarts - Rolling restarts will kill the existing pods and recreate new pods in a rolling fashion.
kubectl rollout restart deployment/<Deployment-Name>
kubectl rollout restart deployment/my-first-deployment



# Pause/Resume the Deployment
# https://github.com/stacksimplify/kubernetes-fundamentals/tree/master/04-Deployments-with-kubectl/04-04-Pause-and-Resume-Deployment
kubectl rollout pause deployment/<Deployment-Name>
kubectl rollout pause deployment/my-first-deployment
kubectl rollout resume deployment/my-first-deployment

#######################################
## namespaces
######################################

kubectl get namespaces                               # return all cluster namespaces
kubectl get <object> --namespeces=<name>             # get object belonging to a namespace
kubectl get <object> -n my-ns                        # get object belonging to a namespace
kubectl  get <object>  --all-namespaces              # get all object belonging to a namespace
kubectl create ns my-ns                              # Create a new namespace named my-ns

kubectl create -f <file.yaml>  --namespace=dev       # create k8 object within specific namesapce

kubectl config set-context $(kubectl config current-context) --namespace=dev  # change workspace scope

kubectl get ns --no-headers     # returns namespaces without title row

#######################################
## ReplicaSet
######################################
kubectl get replicaset
kubectl get replicationController

kube√ßtl replace -f replicaset-definition.yml              # after updating replica file, us this to update the object
kubectl scale --replicas=6 -f replicaset-definition.yml   # scales replica, does not odify file content
kubectl scale --replicas=6 replicaset myapp-replicaset    # scales replica, does not odify file content

#######################################
## DeamonSet
######################################
kubectl get daemonsets 
kubectl describe daemonsets 


#######################################
## Services
######################################
# You can use "svc" or "service"

kubectl  get svc                             # returns  list of services in the cluster.
kubectl  get service                         # returns  list of services in the cluster.
kubectl  get services  --all-namespaces      # get informtiaon about services across all name spaces

kubectl describe services  --all-namespaces
kubectl delete svc nginx-service             # deletes service

kubectl get services kubeserve2 -o yaml      # gets yaml of the service

kubectl get services -w                      # Watch as an external port is created for a service
kubectl get endpoints                        # View the list of endpoints in your cluster that get created with a service
kubectl get gp <serviceName>                 # Vew service endpoint

kubectl get endpoints
kubectl get endpoints kube-scheduler -n kube-system  -o yaml
kubectl get endpoints kube-controller-manager  -n kube-system  -o yaml

#######################################
## Configmap
######################################

kubectl get configmaps       # return configs
kubectl describe configmaps   # describes configmaps  

kubectl create configmap
kubectl create configmap <name> --from-literal=APP_COLOR=blue                               # create config map with key value
kubectl create configmap <name> --from-literal=APP_COLOR=blue --from-literal=APP_MODE=lazy  # create config map with keys/values


# dry run examples
kubectl create configmap --dry-run=client somename --from-file=./conf/nginx.conf --output yaml
kubectl create configmap --dry-run=client somename --from-file=./conf/nginx.conf --output yaml | tee somename.yaml


#######################################
## Secrets
######################################

kubectl get secret
kubectl describe secret
kubectl get secret <name> -o yaml       # ideal to see values of secret's keys
echo -n "data" | bas64                  # enconde value
echo -n "enconded" | base64 --decode    # decode value

kubectl create secret generic <name> --from-literal=DB_PASSWORD=pass   
kubectl create secret generic <name> --from-literal=DB_PASSWORD=pass  --from-literal=SERVER_PASS=pass 
kubectl create secret generic <name> --from-file=filePath
kubectl create secret generic <name> --from-file=./username.txt --from-file=./password.txt

kubectl get secret <name> -o yaml 



#######################################
## ingress Service
######################################

kubectl edit ingress            # Edit the ingress rules:
kubectl describe ingress        # View the existing ingress rules:


kubectl create ingress <ingress-name> --rule="host/path=service:port"
kubectl create ingress ingress-test --rule="wear.my-online-store.com/wear*=wear-service:80"

#######################################
## Labels
######################################
# applied at the pod level

kubectl get pods  --show-labels             # returns pods with their label
kubectl get pods -l env                     # returns pods with specific label
kubectl get pods --selector key=value       # returns pods with specfic labels


kubectl get pods -l env=dev         # returns pods with label key and value
kubectl get pods --selector bu=finance  # returns pods with label key and value

kubectl get all -l bu=finance  # returns pods with label key and value
kubectl get all --selector bu=finance  # returns pods with label key and value

kubectl get pod -l env=prod,bu=finance,tier=frontend

kubectl label node chadcrowell1c.mylabserver.com availability-zone=zone1

kubectl label pods <name> key=value         # apply a new label to a set of labels 
kubectl label pods <name> env=pod          # apply label to a pod

#######################################
## Annotations
######################################
# applied at the obejct  level 

kubectl annotate deployment  <deployment_Name> mycompany.com/someannotation="chad"
kubectl get pods --field-selector status.phase=Running

#######################################
## Selector
######################################

kubectl get <object> --selector env=dev

kubectl get pods --selector env=dev
kubectl get pods --selector bu=finance
kubectl get all --selector env=prod,bu=finance,tier=frontend
kubectl get all --selector env=prod

######################################
## PVC
######################################

kubectl delete pvc --all  --all-namespaces            # delete all pvcs 

#######################################
## Taints
######################################
kubectl taint nodes <nodename> key=value:taint=effect # Taint a node
kubectl taint nodes node1 key:NoSchedule-             # unTaine a node

kubectl taint nodes node01 spray=mortein:NoSchedule --overwrite # overwirte value of taint key value

kubectl taint nodes master node-role.kubernetes.io/master:NoSchedule- # Remove taint from node

#######################################
## logs
######################################

kubectl logs <podName> 
kubectl logs -f <podName> <containerName> # used when you have multiple containers in a pod
kubectl logs -f <podName> --previous      # returns logs of previous instance of the pod not the current running one

kubectl get events
kubectl get events --namespace=my-namespace

######################################
## Stats
######################################

# Installing metric server
git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
kubectl apply -f # withing the firectory

kubectl top node  # get stats of cluster nodes -Only works if you have isntalled metric server
kubectl top pod   # get stats of cluster pod -Only works if you have isntalled metric server

#######################################
## ServiceAccount
######################################

kubectl get serviceaccounts
kubectl get serviceaccounts/build-robot -o yaml   # get servie account yaml

########################
# ingress
########################
kubectl get ingress
kubectl describe ingress

#######################################
## csr
######################################

kubectl get CertificateSigningRequest
kubectl get csr

kubectl certificate approve <csr_name>
kubectl certificate deny <csr_name>

kubectl delete csr <csr_name>
#######################################
## Roles and Rolebindings
######################################

kubectl get roles
kubectl get rolebindings 


kubectl auth can-i create deployments                                    # can be used by user to check if he has permission to peform action
kubectl auth can-i delete nodes                                          # can be used by user to check if he has permission to peform action

kubectl auth can-i create pods --as dev-user                             # can be used by Admin to check if user X has has permission to peform action
kubectl auth can-i create pods --as dev-user --namespace test            # # can be used by Admin to check if user X has has permission to peform action in namespace

###########################################
# ClusterRole and  ClusterRoleBindings
#########################################
kubectl get clusterrole
kubectl get clusterrolebindings 

###########################################
# Limits
#########################################
kubectl get limits -n dev3
kubectl describe limits default-cpu-mem-limit-range -n dev3

###########################################
# Resource Quota 
#########################################
kubectl get quota -n dev3
kubectl describe quota ns-resource-quota -n dev3

#######################################
## Maintainance
######################################

kubectl drain <nodeName>      # Pods are gracefully terminated from a node and recreated on another, also marks node as unsheduable
kubectl uncordon <nodeName>   # Marks node as scheduable
kubectl cordon <nodeName>     # Marks node as unscheduable, however old pods still remain on the node

kubectl drain node01 --ignore-daemonsets
kubectl drain node02 --ignore-daemonsets --force


kubcetl delete node <nodeName>


#######################################
## Upgrade via kubeadm
######################################

kubectl get nodes             #  return version of kubeadm of kublet in each node

kubeadm upgrade plan          # on the master, returns useful info on the upgrade procedure and insturctions 

1) update kubeadm
apt-get upgrade -y kubeadm=1.12.0-00      # upgrade the package version
kubeadm upgrade apply v1.12.0             # apply the update to the note
                                          # pulls update images and update cluster components 

2) update kublet 
apt-get upgrade -y kubelet=1.12.0-00       # upgrade the package version 
systectl restart kubetl                    # restart kubectl 
kubectl get nodes                          # verify version of kublet of the node has been updated


2) Repeat these commands for all worker nodes
kubectl drain node-01                                  # drains pods from the node and marks the node unscheduable
apt-get upgrade -y kubeadm=1.12.0-00                   # upgrade the package version
kubeadm upgrade apply v1.12.0                          # apply the update to the note
apt-get upgrade -y kubelet=1.12.0-00                   # upgrade the package version 
kubeadm upgrade ndde config --kubelet-version v1.12.0  # upgrade node config
systectl restart kubetl                                # restart kubectl 
kubectl uncordon node-01                               # mark the node scheduable again 

#######################################
## ETCD
######################################

kubectl get all --all-namespeces -o yaml > all-deploy-services.yaml     # backup all services running 

ETCDCTL_API=3 etcdctl snapshot save -h 

ETCDCTL_API=3 etcdctl snapshot status -h 

ETCDCTL_API=3 etcdctl snapshot restore -h 

ETCDCTL_API=3 etcdctl --cacert=ca.crt --cert=server.crt --key server.key endpoint health --endpoints=127.0.0.1:2379



========================
= Json path
========================

kubectl get nodes -o=jsonpath="{.items[*]['metadata.name']}"

kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="Hostname")].address}'

#######################################
## OneLiners
######################################
https://kodekloud.com/courses/539883/lectures/10503265

--Pod
kubectl run nginx --image nginx
kubectl run nginx --image=nginx --dry-run=client -o yaml  
kubectl run busybox --image=busybox --restart=Never -command -- sleep 1000
kubectl run busybox --image=busybox --restart=Never -command -- sleep 1000 -l key=value


--Deployment
kubectl create deployment nginx --image=nginx 
kubectl create deployment --image=nginx nginx --dry-run -o yaml
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

kubectl create deployment http-frontend --image httpd:2.4-alpine --replicas=3 --dry-run=client -o yaml

-- Generate Deployment with 4 Replicas
kubectl create deployment nginx --image=nginx
kubectl scale deployment nginx --replicas=4


-- Modifying deployment image deployment --
kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 --record                                                                       
                                                                  # It'll record your changes for a given deployment. - Later you can rollback using revision number if needed.

kubectl --record <changes you making> set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1     
                                                                  # It'll record your changes for a given deployment. - Later you can rollback using revision number if needed.


kubectl edit deployment/name --record=true                        # edit and save record hisotry 

-- service
# EXPSOE = This will automatically use the pod's labels as selectors but  cannot accept a node port
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod nginx --port=80 --name nginx-service --dry-run=client -o yaml

# CREATE = instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set
           Allows you to specify a NodePort
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml



# 5) Create a service, and verify connectivity on the node port.
# This will automatically use the pod's labels as selectors

kubectl expose deployment nginx --port 80 --type NodePort
kubectl expose deployment -n ingress-space ingress-controller --type=NodePort --port=80 --name=ingress --dry-run -o yaml >ingress.yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml


# 3)  Use port forwarding to extend port 80 to 8081, and verify access to the pod directly.
kubectl port-forward [pod_name] 8081:80 # this session must be left open

# 4)  Execute a command directly on a pod.
kubectl exec -it <pod_name> -- nginx -v

# Busybox
kubectl exec busybox -- curl <IP:80>  # Runnin the curl comand from the busybox pod


# 5) Scale deployment replicas
kubectl scale deployment/kubeserve2 --replicas=2



============== Kubernetes MicroServices ==============
cd ~/
git clone https://github.com/linuxacademy/robot-shop.git
kubectl create namespace robot-shop                             # Create a namespace
kubectl -n robot-shop create -f ~/robot-shop/K8s/descriptors/   # deploy app objects using the deployment descriptors from the repo
kubectl get pods -n robot-shop -w                               # -w gives the ability to watch ral time creation of the pods
http://$kube_server_public_ip:30080                             # access the application via the kubernetes master ip

https://github.com/linuxacademy/robot-shop/tree/master/K8s/descriptors

##########################
## Extra
##########################

kubectl get secrets # kubectl get secrets

kubectl get endpoints kube-scheduler -n kube-system -o yaml


# Create a pod instead of a deployment
# --dry-run simulaate the execution
# --restart=Never makes sure this is a pod and not a deployment
kubectl run redis --image=redis --restart=Never --dry-run -o yaml > pod.yaml


# Updating K8s resources

kubectl get po/<name> -o yaml > o.yaml
kubectl delete po/<name>
kubectl apply -f o.yaml


# delting all resources of the same type
kubectl delete pvc --all                              # delete all pvcs 
kubectl delete pvc --all  --all-namespaces            # delete all pvcs 


# kubectl apply on all files in a dir
kubectl apply -f <folder> 

=====================================
= ETCD Backup and Restore
=====================================
https://github.com/mmumshad/kubernetes-the-hard-way/blob/master/practice-questions-answers/cluster-maintenance/backup-etcd/etcd-backup-and-restore.md

=====================================
== Manifests
=====================================

# certificateSigningRequests
https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/

==============================
== ready to go tools
=============================
kubectl run curl-<YOUR NAME> --image=radial/busyboxplus:curl -i --tty --rm    # curl pod used tp trpuble shoot internal cluster


kubectl exec --stdin --tty pod_name -- /bin/bash      # /bin/sh into pod

kubectl delete all --all -n namespaceName             # delete all reousces within a specific resources


# kubectl replace or create new configmap if not exist 
# https://github.com/kubernetes/kubernetes/issues/65066

kubectl create configmap my-config ... --dry-run -o yaml | kubectl apply -f - 


kubectl logs -f --since=10m flight-processor-23424 
 
 
cat manifest.yaml | kubectl apply --namespace "${NAMESPACE}" --force --cascade=orphan --prune --all --prune-whitelist=core/v1/ConfigMap --prune-whitelist=core/v1/Secret -f -

==============================
== EKS 
=============================

kubectl -n kube-system describe configmap aws-auth                 # Get Worker node IAM Role ARN
 


==============================
== Extra
=============================
kubectl get sc,pvc,pv                                                          # get multiple type of resouces 
kubectl run nginx --image nginx  --limits="memory=100Mi" -n default            # run pod with resource limits 

