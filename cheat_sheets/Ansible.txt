================================================================================
sudo visudo 
ansible ALL=(ALL)  NOPASSWD: ALL 

or

%supergroup  ALL=(ALL) NOPASSWD:ALL
================================================================================

#Ping Module
# returns connectivity

ansible localhost -m ping
ansible -i inv remote -m ping

# Command Module
ansible localhost -a "touch hello"                  # creates file  hello
ansible localhost -a "touch hello creates=hello"    # verify that hello does not exist, then creats it
ansible localhost -a "rm -f hello"                  # removes file hello
ansible localhost -a "rm -f hello removes=hello"    # verify that hello exist then removes it

# Shell Module
ansible localhost -m shell -a "echo $PATH > hello"


# Setup module - returns system info
ansible -i inv remote -m setup                        #  returns systems infos
ansible -i inv remote -m setup | less                 # return systems info
ansible -i inv remote -m setup -a "filter=*dist*"     # filter out output
ansible -i inv remote -m setup -a "filter=*ipv4*"     # filter out output
ansible -i inv remote -m setup --tree facts           # write systems info to the facts folder

===================================================================
File Manipulation Modules
===================================================================
# File module
# Used to create delete and modify a file

ansible-doc file  # returns man on file moduule 
ansible -i inv remote -m file -a "name=test.file state=touch"  # creates file
ansible -i inv remote -m file -a "name=test.file state=absent" # deletes a file 
ansible -i inv remote -b -m file -a "name=test.file state=touch"  # creates file with root permission 
ansible -i inv remote -b -m file -a "name=test.file state=absent" # deletes a file with root permission


# Copy module
ansible-doc -s copy   # Returns man on copy module
ansible -i inv remote -m copy -a "src=file dest=/path"         # Copies file from the maaster to nodes

# lineinfile Module
# used to insert (write) into files
ansible -i inv remote -m lineinfile -a "path=file line='text' state=present"         # appends text to a file
ansible -i inv remote -m lineinfile -a "path=file line='text' insertbefore='text' "  # appends text before target text
ansible -i inv remote -m lineinfile -a "path=file line='text' create=yes"            # creates a file before appending
ansible -i inv remote -m lineinfile -a "regexp=OLD_TEXT line=NEW_TXT path=file"      # replaces target text with new text

# get_url module
# used to download files
ansible-doc get_url  help   # returns manual on the module
ansible -i inv remote -m get_url -a "url=www.url.com dest =/home/ansible/url"         # Downloads file to absolute path


# Archive module
# used to create archive of files
ansible -i inv remote -m archive -a "path=dir format=tar dest=files.zip"                # archive files present in a dir
ansible -i inv remote -m unarchive -a "src=file dest=dir"                               # unarchive from master to nodes
ansible -i inv remote -m unarchive -a "src=file dest=dir remote_src=yes"                # unarchive archive present in the node


===================================================================
Configuring System Users and Groups
===================================================================
# User module
ansible-doc user
ansible -i inv remote -b -m user -a "name=super"                            # creates user
ansible -i inv remote -b -m user -a "name=super state=absent"               # deletes user but not user's home dir
ansible -i inv remote -b -m user -a "name=super state=absent remove=yes "   # delete user and user home dir 


# Group module
ansible-doc group
ansible -i inv remote -b -m group -a "name=newGroup"  #Creates a group

===================================================================
Installing Software and Daemon Managment
===================================================================
# Package module
ansible remote -i inv -b -m package -a "name=package state =latest"     #installs packaage on  targets

#Yum module
#Used when installing distro specific package 
ansible remote -i inv -b -m package -a "name=tree state =latest"        #installs packaage on  targets

#Apt module
#Used when installing distro specific package 
ansible remote -i inv -b -m package -a "name=tree state =latest"        #installs packaage on  targets

===================================================================
Controlling Daemons with the Service Module
===================================================================
# Service module
ansible -i inv remote -b -m service -a "name=nginx state=started enabled=yes"

===================================================================
other flags 
===================================================================

 ansible multi -b -k -m yum -a "name=chrony state=present"           # -b --> become, run command with sudo
                                                                     # -k --> if you’re running commands against a server where your user account 
                                                                               requires a password for privilege escalation, pass in -K (alias for --ask-become-pass)
 

# Targeting specific servers within groups
ansible app -b -a "service chronyd restart" --limit "192.168.60.4"   # targets specific host within the app group
                                                                     # --limit will match either an exact string or a regular expression (prefixed with ∼)
                                                                     
ansible app -b -a "service ntpd restart" --limit "*.4"              # Limit hosts with a simple pattern (asterisk is a wildcard).
ansible app -b -a "service ntpd restart" --limit ~".*\.4"           # Limit hosts with a regular expression (prefix with a tilde).




# Async execution 

Some operations take quite a while (minutes or even hours). For example, when you
run yum update or apt-get update && apt-get dist-upgrade, it could be a few
minutes before all the packages on your servers are updated.
In these situations, you can tell Ansible to run the commands asynchronously, and
poll the servers to see when the commands finish. When you’re only managing one
server, this is not really helpful, but if you have many servers, Ansible starts the
command very quickly on all your servers (especially if you set a higher --forks
value), then polls the servers for status until they’re all up to date.

ansible multi -b -B 3600 -P 0 -a "yum -y update"         # -B <seconds>: the maximum amount of time (in seconds) to let the job run.
                                                         # -P <seconds>: the amount of time (in seconds) to wait between polling the servers for an updated job status.
                                                         #  If you set -P 0, Ansible fires off the command on the servers, prints the background job information and exits
                                                         
While the background task is running, you can check on the status elsewhere using
Ansible’s async_status module, as long as you have the ansible_job_id value to
pass in as jid:

 ansible multi -b -m async_status -a "jid=169825235950.3572"

                                                         
                                                         
===================================================================
Other Modules
===================================================================
# ansible-doc -l
# https://docs.ansible.com/ansible/latest/modules/modules_by_category.html
# https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
# Replace module
# script module
# template module



===================================================================
# Ansible-playbook
===================================================================
# https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html

ansible-playbook  -h
ansible-playbook --help

ansible-playbook main.yml

ansible-playbook playbook.yml --limit webservers                          # limit execution of playbook to webservers group
ansible-playbook playbook.yml --limit xyz.example.com                     # limit execution of playbook to a host
                                                                          # even if the playbook is set to hosts: all, it will only be run on the hosts defined in webservers.

ansible-playbook playbook.yml --list-hosts                               # see a list of hosts that would be affected by your playbook before you actually run it




ansible-playbook playbook.yml --user=johndoe

ansible-playbook playbook.yml --become --become-user=janedoe --ask-become-pass

# Extra tags 
--inventory=PATH                # Define a custom inventory file (default is the default Ansible inventory file, usually located at /etc/ansible/hosts).
--verbose (-v)                  # versbose mode, can go up to vvv
--extra-vars=VARS (-e VARS):    # Define variables to be used in the playbook, in "key=value,key=value" format.
--forks=NUM (-f NUM)            # Default is 5
--check                         # Dry run playbook
--become-user                   # Define the sudo user for tasks run via sudo (the default is root) 
--ask-become-pass               # used for password base AuthT

===================================================================
# Ansible Galaxy  | Ansible Roles
===================================================================
# https://galaxy.ansible.com/docs/using/installing.html

ansible-config dump | grep ROLE                                           # view where role default path is

ansible-galaxy init <reoleName>                                           # create ansible role directore structure
ansible-galaxy list                                                          # lists roles

ansible-galaxy install <reoleName>                                         #  download roles from the Galaxy serve
ansible-galaxy install --roles-path ~/ansible-roles <reoleName>            #  override the default path where ansible stores roles

ansible-galaxy install geerlingguy.apache,v1.0.0                           # download role with specific tag version 

ansible-galaxy install -r requirements.yml                                 # Multiple roles can be installed by listing them in a requirements.yml file. 



===================================================================
# Molecule
===================================================================

pip install molecule docker                                                   # install molecule and docker libray for python

molecule init role                                                            # create a new role
molecule init role --driver-name docker  ansible-role-redis        # create ansible role with docker driver 
                                                                   # Setup new ansible role with molecule



molecule test     # run test for the role

molecule init scenario --driver-name docker  # Setup the existing ansible role with molecule - 
                                             # Goto inside ansible role and run below command
                                             
                                             


molecule test         # Runs full testing life cycle for testing (create - converge - verify - destroy)
molecule test --destroy=never
molecule converge     #'provision instances with provisioing playbook
molecule destroy      # destroy intances
molecule verify       # run assert playbook aginst provisioned instances 
molecule list         # list machines provisioned for testing
molecule login       #  allows to login to instance 


scenario:
  create_sequence:
    - dependency
    - create
    - prepare
  check_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - dependency
    - create
    - prepare
    - converge
  destroy_sequence:
    - dependency
    - cleanup
    - destroy
  test_sequence:
    - dependency
    - lint
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy





===================================================================
# New concepts
===================================================================

pre_tasks
post_tasks
stat          https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html

raw?
script?



• If the play fails on a particular host (or all hosts) before handlers are notified,
the handlers will never be run. If it’s desirable to always run handlers, even
after the playbook has failed, you can use the meta module as described
above as a separate task in the playbook, or you use the command line flag
--force-handlers when running your playbook. Handlers won’t run on any
hosts that became unreachable during the playbook’s run






