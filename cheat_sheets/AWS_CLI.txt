# Initial configuration
# http://skillslane.com/aws-tutorial-vpc-launch-instance-cli/
# https://github.com/rajivkanaujia/alphaworks/wiki/Installing-AWS-CLI-via-pip3-and-python3


=============================================================================
= ENV variables 
=============================================================================

https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html

export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE                      # access key
export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI..                       # secret access key
export AWS_DEFAULT_REGION=us-west-2                                # region
export AWS_SESSION_TOKEN=                                          # STS token 
export AWS_DEFAULT_PROFILE=<USER>                                  # Set default aws profile

=================================================================
Configuration
=================================================================

# Create another AWS CLI user profile that uses another keys
aws configure --profile user
aws configure --profile  user2

# Switching between user
aws ec2 describe-instances
aws ec2 describe-instances --profile user2


# List of configured profiles
cat  ~/.aws/credentials | grep "\["

# return caller identity
aws sts get-caller-identity

=================================================================
IAM
=================================================================

=================================================================
STS
=================================================================
 aws sts assume-role --role-arn arn:aws:iam::822304886948:role/test_aws_backup --role-session-name test_user --profile test_user
 
=================================================================
Availability zones
=================================================================
aws ec2 describe-availability-zones

=================================================================
Attach
=================================================================
# Attach to VPC
aws ec2 attach-internet-gateway --internet-gateway-id <value> --vpc-id <value>
aws ec2 associate-route-table --route-table-id <value> --subnet-id <value>
aws ec2 create-route --route-table-id <value> --destination-cidr-block 0.0.0.0/0 --gateway-id <value>

=================================================================
Delete
=================================================================

aws ec2 delete-internet-gateway --internet-gateway-id <value>
aws ec2 delete-vpc --vpc-id <value>
aws ec2 delete-route-table --route-table-id <value>

=================================================================
Vpc
=================================================================

aws ec2 create-vpc --cidr-block 10.0.0.0/16
aws ec2 create-vpc --generate-cli-skeleton > vpc.json
aws ec2 create-vpc --cli-input-json file:///home/vagrant/workspace/vpc.json
aws ec2 describe-vpcs  # Returns vpcs instances

=================================================================
Igw
=================================================================

aws ec2 create-internet-gateway
aws ec2 describe-internet-gateways        # Returns igws instances

=================================================================
Subnet
=================================================================

aws ec2 create-subnet --vpc-id vpc-99e344fd --cidr-block 10.0.1.0/24
aws ec2 create-subnet --vpc-id vpc-99e344fd --cidr-block 10.0.2.0/24
aws ec2 describe-subnets                  # Returns Subnet instances

=================================================================
Route table
=================================================================
aws ec2 create-route-table --vpc-id <value>
aws ec2 describe-route-tables             # Returns Route tables instances

=================================================================
Security Groups
=================================================================
aws ec2 create-security-group --group-name MySecurityGroup --description "..." --vpc-id <value>
aws ec2 describe-security-groups

=================================================================
instaces
=================================================================
aws ec2 run-instances --generate-cli-skeleton
aws ec2 describe-instaces  # Retuns ec2 instaces

=================================================================
S3
=================================================================
aws s3 ls 
aws s3 ls s3://<buvketName>/
aws s3 ls s3://<buvketName>/<prefix>
aws s3 cp s3://pathS3 ./ --recursive     # Copies content within a bucket into destination folder
#aws s3 cp s3://fmap-sat/etc . --recursive --exclude "*" --include "*5e4d01*" # Download only objects that match the include pattern
aws s3api list-objects --bucket bucketname --query "Contents[?LastModified>='2019-06-01T00:00:000Z'].{Key: Key , LastModified: LastModified}"

aws s3api list-objects --bucket myBucketName --query "Contents[?contains(Key, `mySearchPattern`)]"

aws s3 presign s3://awsexamplebucket/test2.txt --expires-in 180  # create presigned url for 3 mintues 


=================================================================
Load Balancer
=================================================================
 
 aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners "Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80" --subnets subnet-15aaab61 --security-groups sg-a61988c3

=================================================================
Autoscaling
=================================================================

aws autoscaling describe-auto-scaling-groups 
aws autoscaling create-auto-scaling-group
aws autoscaling  create-launch-configuration

aws autoscaling delete-auto-scaling-group

# Basic Launch Configuration setup

aws autoscaling create-launch-configuration 
 --launch-configuration-name my-launch-config 
  --image-id ami-0ad82a384c06c911e --instance-type t2.micro  
   --associate-public-ip-address 
    --security-groups 
     --user-data file://myuserdata.txt
      --key-name my-key-pair
      
      
      
      
      
aws autoscaling describe-launch-configurations
aws autoscaling delete-launch-configuration --launch-configuration-name <value>

=================================================================
EC2 Key Pairs
=================================================================
      
 # Generatin aws ec2 create-key-pair
 aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem
 aws ec2 describe-key-pairs --key-name MyKeyPair
 aws ec2 delete-key-pair --key-name MyKeyPair



===========================================
== ADFS
===========================================

aws-adfs login --adfs-host=<domain> --ssl-verification


===========================================
== AWS EKS
===========================================

aws eks update-kubeconfig --name <clusterName>    # adds new context to your local .kube/config









========================
== AWS KMS
========================

aws kms encrypt \
    --key-id alias/catrobot \
    --plaintext fileb://battleplans.txt \
    --output text \
    --query CiphertextBlob \
    --profile iamadmin-general | base64 \
    --decode > not_battleplans.enc 
    
                                                           # can ommit profile flag if not needed
    
aws kms decrypt \
    --ciphertext-blob fileb://not_battleplans.enc \
    --output text \
    --profile iamadmin-general \
    --query Plaintext | base64 --decode > decryptedplans.txt
    
                                                           # can ommit profile flag if not needed
========================
= SSM session manager
=======================
aws ssm describe-instance-information

aws ssm start-session \
    --target instance-id
    
 aws ssm send-command     --instance-ids "i-0253d456b7282573a"     --document-name "AWS-RunShellScript"     --comment "IP config"     --parameters commands="touch /tmp/test"     --output text
    
=====================
= SSM parameters
=====================

# CREATE PARAMETERS
/my-cat-app/dbstring        db.allthecats.com:3306
/my-cat-app/dbuser          bosscat
/my-cat-app/dbpassword      amazingsecretpassword1337 (encrypted)
/my-dog-app/dbstring        db.ifwereallymusthavedogs.com:3306
/rate-my-lizard/dbstring    db.thisisprettyrandom.com:3306

# GET PARAMETERS
aws ssm get-parameters --names /rate-my-lizard/dbstring --profile iamadmin-general                 # get string parameter
aws ssm get-parameters --names /my-dog-app/dbstring --profile iamadmin-general                     # get string parameter
aws ssm get-parameters --names /my-cat-app/dbstring --profile iamadmin-general                     # get string parameter
aws ssm get-parameters-by-path --path /my-cat-app/ --profile iamadmin-general                      # get parameters under 'my-cat-app' tree
aws ssm get-parameters-by-path --path /my-cat-app/ --with-decryption --profile iamadmin-general    # get parameters under 'my-cat-app' tree and decrypt any secureString  
    
    
===========================
= Cloudwatch Agent on EC2
==========================

wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm

sudo rpm -U ./amazon-cloudwatch-agent.rpm

# IAM ROLE
EC2 Role
EC2
CloudWatchAgentServerPolicy
And AmazonSSMFullAccess 
CloudWatchRole

sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard
# Accept all defaults, until default metrics .. pick advanced.

# then when asking for log files to monitor

# 1 /VAR/LOG/SECURE
/var/log/secure
/var/log/secure
(Accept default instance ID)

# 2 /var/log/httpd/access_log
/var/log/httpd/access_log
/var/log/httpd/access_log
(Accept default instance ID)

# 3 /var/log/httpd/error_log
/var/log/httpd/error_log
/var/log/httpd/error_log
(Accept default instance ID)

# Config will be stored in /opt/aws/amazon-cloudwatch-agent/bin/config.json and stored in SSM

# Bug Fix
sudo mkdir -p /usr/share/collectd/
sudo touch /usr/share/collectd/types.db

# Load Config and start agent
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:AmazonCloudWatch-linux -s

=====================
= EC2 meta-data API
=====================
# Run the following from ec2 instance to access Ec2 metadat info
    
curl http://169.254.169.254/latest/meta-data/public-ipv4
curl http://169.254.169.254/latest/meta-data/public-hostname
http://169.254.169.254/latest/meta-data/iam/security-credentials
http://169.254.169.254/latest/meta-data/iam/security-credentials/role-name

wget http://s3.amazonaws.com/ec2metadata/ec2-metadata
chmod u+x ec2-metadata

ec2-metadata --help
ec2-metadata -a
ec2-metadata -z
ec2-metadata -s
