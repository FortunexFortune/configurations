#######################################
## System
######################################
kubectl get all                                   # returns all objects

kubectl explain pod                               # Explain resource (help)
kubectl explain persistentvolumes.spec.hostPath   # Explain resource (help)

sudo systemctl status kubelet               # check status of the service

kubectl create -f <file.yaml>               # create k8 object

kubectl get componentstatus                 # returns compoenets status

kubectl cluster-info                        # returns info on where the master and DNS is running
kubectl config view                         # returns brief configuration of your cluster
kubectl api-resources -o wide               # get all resource avaible on your cluster
kubectl get pods -n kube-system             # returns pods running in the kube system namespace

kubectl describe nodes                      # get Information about nodes
kubectl describe pods                       # get Information about pods

kubectl get endpoints
kubectl get endpoints kube-scheduler -n kube-system  -o yaml
kubectl get endpoints kube-controller-manager  -n kube-system  -o yaml

#######################################
## Container and pods
######################################

kubectl get pods                            # returns running pods
kubectl get pods -o wide                    # returns ip address of your pods
kubectl get pods -n <name>                  # get pods belonging to a namespace
kubectl get pods --all-namespeces           # get pods across all namespaces
kubectl get pods --all-namespeces -o wide   # get pods across all namespaces with more details

kubectl describe pods
kubectl describe pod nginx
kubectl delete pod nginx
kubectl describe pods  --all-namespaces     # get Information about pods across all name spaces

kubectl get pods  --show-labels             # returns pods and their labels

kubectl get pods/<podname> -o yaml          # return yaml of a pod state

kubectl edit pod <podName>                  # k8 updates the pod and updates it in real time

#######################################
## Clustering and Nodes
######################################

kubectl get nodes                   # Get a list of nodes
kubectl describe nodes               # get Information about nodes
kubectl describe node $node_name    # Get more information about a specific node

#######################################
## Deployments
######################################

kubectl get deployments                         # returns your deployments
kubectl get deployment <name> -o yaml           # returns the complete yaml of the deployment (COMPLETE)

kubectl describe deployment nginx-deployment    # return more info related to the deployment
kubectl delete deployment nginx                 # delete deployments

#######################################
## Services
######################################
# You can use "svc" or "service"

kubectl get svc                              #returns  list of services in the cluster.
kubectl get service                          #returns  list of services in the cluster.
kubectl  get services  --all-namespaces      # get informtiaon about services across all name spaces

kubectl  describe services  --all-namespaces
kubectl delete svc nginx-service  #deletes service

kubectl get services -w                      # Watch as an external port is created for a service
kubectl get endpoints                        # View the list of endpoints in your cluster that get created with a service

kubectl get services kubeserve2 -o yaml      # gets yaml of the service

#######################################
## ingress Service
######################################
# https://kubernetes.io/docs/concepts/services-networking/ingress/

kubectl edit ingress            # Edit the ingress rules:
kubectl describe ingress        # View the existing ingress rules:


#######################################
## namespaces
######################################

kubectl get namespaces        # return namespace
kubectl get pods -n my-ns     # get pods belonging to a namespace
kubectl create ns my-ns       # Create a new namespace named my-ns

#######################################
## Labels
######################################
# applied at the pod level

kubectl get pods  --show-labels             # returns pods with their label
kubectl get pods -L env                     # returns pods with specific label

kubectl label pods <name> key=value         # apply a new label to a set of labels 
kubectl label pods <pod name> env=pod       # apply label to a pod

kubectl label node chadcrowell1c.mylabserver.com availability-zone=zone1


#######################################
## Annotations
######################################
# applied at the obejct  level 

kubectl annotate deployment  <deployment_Name> mycompany.com/someannotation="chad"
kubectl get pods --field-selector status.phase=Running

#######################################
## logs
######################################

kubectl logs <podName> <containerName>

#######################################
## ServiceAccount
######################################

kubectl get serviceaccounts
kubectl get serviceaccounts/build-robot -o yaml   # get servie account yaml

#######################################
## ReplicationController
######################################
kubectl get replicationController

#######################################
## ReplicaSet
######################################
kubectl get replicaset

kube√ßtl replace -f replicaset-definition.yml              # after updating replica file, us this to update the object
kubectl scale --replicas=6 -f replicaset-definition.yml   # scales replica, does not odify file content
kubectl scale --replicas=6 replicaset myapp-replicaset    # scales replica, does not odify file content


#######################################
## OneLiners
######################################



# 1)  Run a deployment that includes at least one pod, and verify it was successful.
kubectl create deployment nginx --image=nginx 
kubectl run nginx --image nginx

# 5) Create a service, and verify connectivity on the node port.
kubectl expose deployment nginx --port 80 --type NodePort

# 3)  Use port forwarding to extend port 80 to 8081, and verify access to the pod directly.
kubectl port-forward [pod_name] 8081:80 # this session must be left open

# 4)  Execute a command directly on a pod.
kubectl exec -it <pod_name> -- nginx -v

# Busybox
kubectl exec busybox -- curl <IP:80>  # Runnin the curl comand from the busybox pod


# 5) Scale deployment replicas
kubectl scale deployment/kubeserve2 --replicas=2


============== Kubernetes MicroServices ==============
cd ~/
git clone https://github.com/linuxacademy/robot-shop.git
kubectl create namespace robot-shop                             # Create a namespace
kubectl -n robot-shop create -f ~/robot-shop/K8s/descriptors/   # deploy app objects using the deployment descriptors from the repo
kubectl get pods -n robot-shop -w                               # -w gives the ability to watch ral time creation of the pods
http://$kube_server_public_ip:30080                             # access the application via the kubernetes master ip

https://github.com/linuxacademy/robot-shop/tree/master/K8s/descriptors

##########################
## Extra
##########################

kubectl get secrets # kubectl get secrets

kubectl get endpoints kube-scheduler -n kube-system -o yam l

