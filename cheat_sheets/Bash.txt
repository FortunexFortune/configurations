=========== Networking  ==================
ip a 			# the new substitue for ifonfig
ip r			# returns info on gateway 
routel			# return route tables

curl ifconfig.me	# returns public ip
ifconfig		# (Obsolate) returns network info
ip addr show		# returns network info
ip a 			# the new substitue for ifonfig
ip route show 		# returns info on gateway
ip r
route			# returns info on gateway
routel 			# returns info on gateway
netstat -r 		# (Obsolate) returns info on gateway
netstat -rn

nmcli			# returns network info
nmcli device show	# returns network info
nmcli device status

hostname -I		# returns private ip address
ip n 			# reutns arp (address resolution protocol) table

host <website> 		#returns DNS name resolution
ping <ipadress> 	#checks connectivity to an ip address, used to troubleshoot network conenction
ping -c 3 <ipadress>	# used to test the reachability of a host on an Internet Protocol network.
			# -c = checks that the destination device can recive packages, in this case 3 
			
sudo netstat -tupln	# (Obsolate) Return listening ports
sudo netstat -plnt	# (Obsolate) Return listening ports

sudo ss -tl		# Return listening TCP ports
sudo ss -ltn		# Return listening TCP ports and process name


dig -4 <domain> 	# reutrns "A records" of the domain name

sudo dhclient -r		# release ip address 
sudo dhclient 			# restarts dhc client 
sudo ss -luntp | grep -i dhc	# Return dhclient listening port 


telnet {host} {port}
nmap -p {port} {host}		# ping and test for a specific port

nc -l 2399			# Server side - server listens on selected port
nc localhost 2399		# Client side - client communicate to server on selected port

nc localhost 2399 Hello Server	# Client side - client sends message to server over specfific port
nc -l 2399 Hello Server		# Server sidee	- Server listens on selected port with message



sudo ip addr del 172.18.0.1/16 dev br-ecb66ec30f7e  # Generally used for autogenerated ips like the ones docker create
sudo ip addr del <ip/cidr> dev <nicName>


dhclient -v enp0s8		# I ussed this command to help my VM dinf the DHCP server
dhclient -v <Nic>		# I ussed this command to help my VM dinf the DHCP server

============ Users ============ 
sudo visudo 			#returns sudoers file

useradd <user>			#create user
adduser <user> 			# On Debian, administrators should usually use adduser instead of useradd
passwd <user>			#change user password
userdel -r<user>		#delete user
deluser -r <user>		#delete user
userdel -f <user>		#delete user with force
groupadd <Group>		#create group
usermod -aG <Group> <User>	#add user to a group
gpasswd -a <User> <Group>	#add user to a group	
groupdel <Group>		#Delete Group

#User creaion in Centos
NEWUSER=<user> && sudo useradd $NEWUSER  -G wheel ; sudo passwd $NEWUSER

#User creaion in Ubuntu
NEWUSER=test && sudo adduser $NEWUSER ; sudo usermod -aG sudo $NEWUSER 
NEWUSER=test && PASWD=pass && sudo adduser --disabled-password --gecos "" $NEWUSER &&  echo "$NEWUSER:$PASWD" | sudo chpasswd

#sudo useradd test && echo "test:password" | sudo chpasswd
======= Groups ===========================

sudo groupadd basket

/*Need sudo to create new group*/
/*useradd == Creates a new group*/
/*basket == the group username can be anything*/

sudo usermod -a -G basket frank	

/*user mod is used to modify users*/
/*-a == appennd or add to a group*/
/*-g == change primary group */
/*-G == add user to another group wihout taking him off his primary group*/

============ SSH ============ 
#Link to ssh article:  https://www.ssh.com/ssh/keygen/
ssh-keygen   			#Creates new authentication key pairs for SSH
ssh-keygen -t rsa -b 4096	#Creates new authentication key pairs for SSH with rsa algorithm
ssh user@hostname		#SSH into remote comupter
ssh -p 22 user@hostname		#SSH into remote computer via a specific port
ssh-copy-id pi@10.25.6.0	#Copies the public key to the remote computer
ssh -v user@hostname		#SSH into remote computer while returning what the client is doing
ssh user@hostname <COMMAND>	#Returns command standard-out peformed on the server to the client terminal


#ssh -p 8011 -L 8080:172.20.0.1:4200 ubuntu@184.34.4.4	# ssh local port fowarding


ssh -D 9000 -C ubuntu@179.32.9.6 -p 2222	# Socks proxy via ssh Dynamic tunnel setup
ssh -D 9000 -C ubuntu@179.32.9.6 		# Socks proxy via ssh Dynamic tunnel setup


scp file user@hostname:/path_on_server		#Transer file from client to server
scp file user@hostname:				#Transer file from client to server HOME directory
scp -P  port file user@hostname:/path_on_server	#Transer file from client to server over specific port
scp -r dir user@hostname:/path_on_server	#Transer dirctory from client to server

scp user@hostname:/path_on_server .		#Transer file from server to client
scp user@hostname:/path_on_server /home/user	#Transer file from server to client

sshfs user@hostanme:dir_to-mount /place_to_mount_localally # Mount dir
fusermount -u /path/to/dirMounted			   # UnmountDir



ssh-keygen -R <ServerIp or HostName>		# Fixing the WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 


============ Text ============ 
head newfile.txt		# This will display the first 10 lines of a file
tail newfile.txt		# This will display the last 10 lines of a file
tail -f /log			# Monitor Logs in Real Time
sudo tail -n2 -f /log		# Monitor Logs last n lines in Real Time

touch file.txt			#Create blank file
cat file.txt 			#Read file
cat file1.txt file2.txt  	#Read files
mkdir				#maked directory
mkdir -p hello/no/yes/lol	#Creates cascade directories,directories inside directories
mv file /home/fortune/holder 	#Moves the file to the specified folder*/
mv file file2			#rename the file to hello2*/
rm 				#remove files*/
rm -rf folder 			#removes directoriey
cp  file location/path		#copy a file from a location to the other
grep  "phrase" file 		#used to look for a word or phrase in a file, it will then print the specific line  
diff file1 file2 		#analyze the 2 files and print out any line that do not match in both files
diff -qr directory-1/ directory-2/ 	# returns diff between dirs, r = rescurive and q = returns only differenes

========== File Compression and Archiving  ==================
tar -cf <file> <file> Name		# Archive files
					# -c = create new archieve
					# -f = name of the archieve 
				
tar -tf <file> <file> Name	        # List archieve content
					# -t list content
					# -f = name of the archieve 
				
tar -xf <file> <file> Name       	# open archive 
					
	
tar -czvf file.tar.gz folder_to_zip 	# tar.gz an entire folder (archieve and comprime)
tar -xf Rese.tar.gz			# unzip tar.gz

				

============ Variables ============ 
VARIABLENAME=VALUE		#Assign value to variable
export VARIABLENAME		#export varaible value, allows the variable o be used in new bash instances
echo $VARIABLENAME		#returns variable value



============= Allies ==============
alias
alias hello='echo hello world'
unalias hello 

=========== Riderection  ===========
Any process that runs on the linux kernel as 3 CHANNELS called:
STDIN -->0		 	#Your Standard keyboard input
STDOUT -->1		 	#Your Standard terminal output
STDERR -->2			#Your Standard terminal Error message

echo "hello" 1>file.txt		#overwrites file by inserting the content into the first line
echo "hello" >file.txt		#overwrites file by inserting the content into the first line

echo "hello" 1>>file.txt	#create a new line and start inputing content into a new line
echo "hello" >>file.txt		#create a new line and start inputing content into a new line

zzzz 2> err.txt			#Insert error message into file by overwrting the file content
zzzz 2>> err.txt		#Insert error message into the file new line

command > file-name 2>&1.               # outputs both stderr and output into a file 
SomeCommand 2>&1 | tee SomeFile.txt	# outputs both stderr and output displayed on the console and in a file


============ Operators ======================
#link to the resource https://askubuntu.com/questions/334994/which-one-is-better-using-or-to-execute-multiple-commands-in-one-line
A; B    # Run A and then B, regardless of success of A
A && B  # Run B if and only if A succeeded
A || B  # Run B if and only if A failed
A &     # Run A in background.

prog | Prog2 | prog3		#Feeds the output of each comand or program into the next program
A & B || c			#Runs either b or c if A succeed
		
================ Permissions [ chmod ]============================
7 == is the combination of all the numbers "Read Write Execute"
6 == is the combination of 4 and 2 "Read and Write"
5 == is the combination of 4 and 1 "Read and execute"
4  == Stands for "read"
3 == is the combination of 2 and 1 "Write and Execute"
2  == Stands for "write"
1  == Stands for "execute"
0  == Stand for "No permissions". 

chmod 766 file			# Change permssion of suer , groups and others in one go		
chmod -R 777 /www/store		# REcorsively change permssion of folder

#	u /*user*/
#	g /*group*/
#	o /*others*/
#	-rwxr-xr-x 2
#	drwxr-xr-x 2
#	d indicates is a dirctory*/
#	r /* Stands for Read*/
#	w /* Stands for Write*/
#	X /* Stands for Execute*/
#	- /* Stands for permission not set */
__________________________

chmod o+w file		#Gives perimsion to others to write
chmod o-w file		#Takes away perimsion to others to write

__________________________

chown <userName>: file   # changes user  ownership of a file
chown :<groupName> file  # changes group ownership of a file
chgrp <groupName> file	 # changes group ownership of a file

# The only user that can change user permission on a file is Root


=================== Procesess =================== 
ps aux  | grep -i process
				-a lists processes started by all users
				-x also lists processes started at boot like daemons
				-u will add columns with additional information on each process
				
ps -ef  | grep -i process	# To see every process on the system using standard syntax

				PID - The process ID. Usually,
				TTY - The name of the controlling terminal for the process.
				TIME - The cumulative CPU time of the process, shown in minutes and seconds.
				CMD - The name of the command that was used to start the process.
				
				
				TIME is a measure of actual CPU time being used, 
				not elapsed time since the process started. 
				If the process is essentially idle, TIME will not increment much

ctrl +z 		#Used to pause a process
kill (Process_id)	#used to  kill proceses

top
htop 

============== Hardware information ==============
lscpu			#Returns- information about the cpu and processing units
hwinfo  --short		#Returns- Hardware Information
lshw -short		#Retruns - List Hardware
free -m			#Check the amount of Ram used (Phsyscal ram and Swap)

================ PowerOff ============================
shutdown now		#power off
shutdown -r now		#Restart
shutdown -h  now	#turn it off
shutdown +60		#power off in 1 hour
shutdown -r  +30	#Restart in half an hour
shutdown -h  +10	#Turn it off in 10 mins
init 0			#power off
init 6			#Reebot 

================ File system essential ======================

pwd 			#Print my working directory
ls			#list the items in the currebt folder
ls /path/folder		#list the items in the folder of your choice*/
ls -a /path/folder	#retrun a list of all files (hiden files included)
ls -l path/folder	#returns you a detailed report of the files
cd /path/folder		#Change directory
cd ..			#Takes you up 1 director
cd .. / ..		#Takes you up 2 director
cd ~			#Takes you to the home directory
which command 		#returns comand bianry path
xxd  -b `which command` #returns hex reppresentaion of the program
xxd  `which command`	 #returns binary reppresentaion of the program


# Creates a Symbolic link
ln -s /target_Path /destination_Path
# Removes Symbolic link
unlink link name 	

================ Search files  ======================

whereis software 	# binary file directories, man page directories, and library directories
locate software		# locate command in Linux is used to find the files by name (Looks though a DB)
find software		# used to find files and directories (Looks though the file system)
which software		# used to locate the executable file associated with the given command

===================== Powering off ===================
init 0
init 6
shutdown -h +15 "Shutting down in 15 minutes2
shutdown -r +10 "Rebooting in 10 minutes."


============== System ==================
uname  -a		#returns system info
lsb_release  -a		#returns system info
who 			#returns loggged in users
w			# returns logged in users with more details
id 			#return information on the user account
users 			#returns logged in users
users | wc -w		#returns number of logged in users
whoami 			#returns logged suer
su			#logs you to root in the current directory 
su -			#logs you to root in the root home folder
su user			#logs you to  the user in the current directory 
su - user		#logs you to the user in the user home folder

lsblk	# list block devices


df -h 	/mnt/SDS_data_small/ # Return disk space in human readable format
df -BG  /mnt/SDS_data_small/ #  Return disk space in GB

du -sh /file/path	# returns size of folder
du -shk /file/path	# returns size of a folder in Kilobytes
du -shm /home/tecmint	# returns size of a folder in mb

du -h /home/tecmint 	# returns the size of each file inside the target folder
du -mh /home/tecmint


=============== EOF - Here Document  ========
# A here document is used to redirect input into an interactive shell script or program.
# https://superuser.com/questions/1003760/what-does-eof-do

# Read standard in 
grep -i hello <<EOF
hello dear
friend
EOF

# Read standard in 
wc -l << EOF
This is a simple lookup program 
for good (and bad) restaurants
in Cape Town.
EOF

# Write to a file from standard in
touch <File>
cat << EOF > /path/<File>
[nginx]
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1
EOF


================= installing software ==========

--debian packer
sudo apt install ./name.deb # install a debian deb package

sudo apt-mark hold kubelet kubeadm kubectl	# put's packages on hold meaning you can not update the package
sudo apt-mark showhold 				# view hold packages
sudo sudo apt-mark unhold <package name>	# unhold pacakges


================ RedHat Service Tools ======================
runlevel				#Returns you current runlevel
chkconfig				#Returns runlevel services
chkconfig --list 			#Returns runlevel services
chkconfig --list serviceName		#Returns specified runlevel service
chkconfig --level 3 serviceName off	#enable/disable services ability to run when system boots on specific run levels
chkconfig --level 3 serviceName oon	#enable/disable services ability to run when system boots on specific run levels

service serviceName status 		#Returns service status 
service serviceName start		#enable/disable services ability to run 
service serviceName stop 		#enable/disable services ability to run
service serviceName restart 		#restart services 
service serviceName reload 
sudo service --status-all 		# List all running services 

================ Systremd ======================
systemd-cgls 				# returns all the processes of the system
systemd-cgtop 				# returns the top cgroups accodring to their resources
systemctl status			# returns the top cgroups accodring to their resources

systemctl status serviceName		# Returns details on the service
systemctl enable serviceName		# enable service to start at boot
systemctl disable serviceName		# disbale serivce to start at boot
systemctl start serviceName		# start service now
systemctl reload serviceName		# reload service now
systemctl stop serviceName		# stop service sertvice now
systemctl help serviceName		# returns manuals of a service
systemctl daemon-reload			# Reload dependeccy tree, use it after modyfing a unit file
systemd-delta				# Returns modified unit files

systemctl is-active application.service
systemctl is-enabled application.service
systemctl is-failed application.service
systemctl list-units				# list of all of the active units that systemd knows about

systemctl list-units --all --state=inactive
systemctl list-units --type=service
systemctl list-unit-files
systemctl list-unit-files | grep enabled

systemctl cat application.service		# Cat unite file 
systemctl list-dependencies sshd.service	# Returns unit's dependency tree
systemctl edit <applciation.unit>		# creates a drop-in unit
systemctl edit --full <applciation.unit>	# creates a drop-in unit

journalctl				# returns system log ( jorunal ) 
journalctl -e				# jumps to the ned of the log page
journalctl -f 				# Returns realtime  log entries
journalctl -n 2 			# Retuns n number of ,ust recent entries
journalctl -r 				# Returns must recent log data
journalctl -u service_name		# Returns log related to the service selected
journalctl -o versbose 			# Returns log in a DB format
journalctl -o json-pretty		# Returns log in multi line json format 

localectl 				# Retusns systmem localose and keyboard mapping
timedatectl				# view and set time zone and system time
timedatectl list-timezones 		# Return time zones available
timedatectl set-timezone "time_zone"	# Sets Sysstem time zone 
hostnamectl 				# Returns system hostname

systemd-analyze				# Returns how long it took the system to boot up
systemd-resolve website			# Returns hostname IP adress
systmed-inhibit download file 		# Prevent the system from sleeping before finishing the command passed in


systemctl list-unit-files -t target	# returns all target unit files
systemctl list-units -t target		# Reutrns active target units
systemctl get-default			# return default target
systemctl set-default <target.unit>	# change deafult target to specified target
systemctl isolate <target.unit>		# change system to specified target

systemctl rescue			# change system to run level 1
systemctl reboot			# run reboot target unit 
systemctl poweroff			# run reboot target unit


sudo systemctl status {firewalld,iptables} # returns the running services

====================== Script =====================
#Used to record shell sessions
script 			# start recording
script 	<fileName>	# start recording into a filename
exit			# ends the recorind


script <fileName> --timing=time.log	# start replayble recording
scriptreplay -s <fileName> -t time.log	# replay replayable recording

script -c "netstat -tupln" netstat.log	# write outpuut into log file

================== Cron ================== 
# https://crontab.guru/
crontab -l 		# return user cronjobs
crontab -e		# edit croontab
crontab -u <user> -e	# edit user crontab
sudo contabl -l 	# returns root crontab
sudo crontab -e
crontab -r		# removes crontab for user


# template
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                       7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  command_to_execute

# The following will run on the 1st and the 15th of the month
# 0 0 1,15 * *  command_to_execute

# The following will run the command every 10 mins
# */10 * * * *  command_to_execute

# The following will run the command every 3 days
# 0 0 */3 * *  command_to_execute

# The following will run the command from midnight to 5 am of every day
# 0 0-5 * * *  command_to_execute

# The following will run the command every 30 min Mon to Frid from 9am-5pm
*/30 9-17 * * 1-5 command_to_execute

###### Sample crontab ######

# Empty temp folder every Friday at 5pm
0 5 * * 5 rm -rf /tmp/*

# Backup images to Google Drive every night at midnight
0 0 * * * rsync -a ~/Pictures/ ~/Google\ Drive/Pictures/

================== Mounting ===================

sudo mount -t cifs -o username={{username}},password={{password}} //172.16.0.34/AtlasData/KORE/data_unit_tests  /mnt/atlas_kore/
sudo umount -f -l  /mnt/folder

sduo umount -f -l /mnt/myfolder
# NFS
sudo mount serverIP:/exportFolder_server /mnt/mountfolder_client
showmount -e 192.168.1.12	# Run this on the client


================== Encryption ===================
# https://www.cyberciti.biz/tips/linux-how-to-encrypt-and-decrypt-files-with-a-password.html

gpg -c filename				# (symmetric encryption) Encrypt  
gpg myfinancial.info.txt.gpg		# (symmetric encryption) Decrypt
gpg -o outputFile fileToDecrypt.gpg	# (symmetric encryption Decrypt gpg content to destination file
echo RELOADAGENT | gpg-connect-agent	# reload gpg agent, clear it's cache, hence it will forget passoword
gpg -d myfinancial.info.txt.gpg		# Decrypt
gpg --decrypt myfinancial.info.txt.gpg	# Decrypt

gpg --gen-key							# (asymmetric encryption) generate gpg keys
gpg --armor --output pubkey.txt --export 'Adrian'		# (asymmetric encryption) export pub key to a file
gpg --armor --output privkey.asc --export-secret-keys 'Adrian'	# (asymmetric encryption) export private key to a file
gpg --encrypt --recipient 'Adrian' hiddenmessage.txt		# (asymmetric encryption) encrypt file with the adrian public key
gpg --output decrypted.txt --decrypt hiddenmessage.txt.gpg	# (asymmetric encryption) dencrypt file with the adrian public key


==================== Swap ============================

cat /proc/sys/vm/swappiness	# Returns swapiness level
sudo sysctl vm.swappiness=10 	# Change swappines level
sudo smem -nk
sudo smem -p
sudo smem --processfilter="firefox"
sudo swapoff -a
sudo swapon -a
sudo swapon --show	# return swap location

==================Extras===================
curl -I ip_Adress # Curls the header of the target ip

echo $?			# return exit status of previuos command, 0 = sucess , 1 = error, >1 = other special error
( echo "Hello" ) 	# runs command in a subshell
( echo $BASH_SUBSHELL)	# runs commaind in a subshell 

CTRL + A 		#Takes you to the begining of the comand line
CTRl + E 		#Takes you to the end of the comand line
clear 			#clear the screen
Up and Down		#scroll through the commands
ctrl + r		#used after typing a comand, used to rewrite the same type of commands that was used in time past 
ctrl+c 			#interupt, it will get you out of a process 

sha256sum fileName | grep fcaf10fa60066437b20... # Compares the result of the hash operation with the original, if the output from gerp
						 # is red, then the file was not hijacked

export PS1="\e[0;31m[\u@\h \W]\$ \e[m "		#To set a red color prompt
#Link to  Promopt formatting --> https://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/

export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$"

setxkbmap -layout us  # set keyboard to us
setxkbmap -layout gb  # set keyboard to gb



echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf	# Appends input to output file

VBoxManage modifyhd KoreVM-disk001.vdi --resize 50000	# virtualbbox

============  Sending file via putty, from windows to linux ============ 

pscp C:\Users\fortu\Downloads\Note.sql fortune@34.244.23.180:/home/fortune
#https://it.cornell.edu/managed-servers/transfer-files-using-putty


find /mnt/SDS_data  -type f -mtime -8 >> newFiles.txt	

sudo rsync -anvP --delete  /mnt/SDS_data/ /mnt/SDS_data_small/


tree --du -h /opt/ktube-media-downloader		# Returns tree output with size information
sudo  tune2fs -l /dev/nvme2n1 | grep Block		# returns block size of the mountpoint


command & # This command will let your command run in background, but will be killed when current session closed.
nohup <command> <args> ><filename> 2>&1 &  # This command will continue running even the terminal session ends.

grep -o				# -o returns the match cahraters only and not the entire line
grep -P				# perl regular experssion
grep -c "echo" FILE		#  This will output the number of lines that contain your search string.



#########################################
#### Shell Expansion
##########################################

sudo mkdir /mnt/{dir1,dir2,dir3,dir3}  # create multiple dir under /mnt

