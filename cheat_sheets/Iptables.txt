======================================================
= Tables
======================================================
https://www.thegeekstuff.com/2011/01/iptables-fundamentals/


Filter 

INPUT chain – Incoming to firewall. For packets coming to the local server.
OUTPUT chain – Outgoing from firewall. For packets generated locally and going out of the local server.
FORWARD chain - Packet for another NIC on the local server. For packets routed through the local server.

NAT 

PREROUTING chain – Alters packets before routing. i.e Packet translation happens immediately after the packet comes to the system (and before routing).
POSTROUTING chain – Alters packets after routing. i.e Packet translation happens when the packets are leaving the system.
OUTPUT chain – NAT for locally generated packets on the firewall.


Mangle 

PREROUTING chain
OUTPUT chain
FORWARD chain
INPUT chain
POSTROUTING chain


Raw 

PREROUTING chain
OUTPUT chain

======================================================
= Commands 
======================================================

# Generic


iptables -A INPUT -p tcp --dport 80 -j DROP                                 # block  https request, frome everywhere 

iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j DROP        # bock icmp requests, more specifically echo requests

iptables -t filter -A OUTPUT -p tcp --dport 80 -d www.ubuntu.com -j DROP    # block outing request to ubuntu domain
iptables -t filter -A OUTPUT -p tcp --dport 443 -d www.ubuntu.com -j DROP   # # block outing request to ubuntu domain


# LIST
iptables -L                   # List filter table (default table)
iptables -nvL                 # Verbose print out all active iptables rules
                              # v --> versbose, show interface name, packet and bytes quantity 
                              # n --> ip adress and ports will be printed  numerically 
            
                              
iptables -t filter -L         # listing the filter table of all chains (INPUT, OUTPUT and FORWARD)
iptables -vnL                 # listing the filter table (it's default) of all chains, verbose (v) and in numeric format (n) 
iptables -vnL INPUT         ` # listing specific chain whitin  a table 
iptables -t nat -vnL          # listing another table, not filter
iptables -t nat -vnL POSTROUTING  # listing just a CHAIN


# APPEND
iptables -A INPUT -p tcp --dport 80 -j DROP           # append command to the INPUT chain (will be added to the bottom of the chain by default)


# INSERT
iptables -I INPUT -p icmp -j ACCEPT                   # insert rule at the top of the chain (default behavoiur)
iptables -I INPUT -p udp --dport 69 -j DROP           # insert rule at the top of the chain (default behavoiur)
iptables -I INPUT <n> -p icmp -j ACCEPT                 # insert rule at position n of the chain 
iptables -I INPUT 3 -p icmp -j ACCEPT                   # insert rule at position n of the chain 



# FLUSH
iptables -F                                           # flushes all rules in all chains of the default table (filter table)
iptables -F INPUT                                          
iptables -F INPUT  -t nat                


# ZERO
iptables -Z                                            # resets bytes and packets counter 


# N
iptables -N TCP_TRAFFIC                                # creates a user-defined CHAIN
 
# X
iptables -X TCP_TRAFFIC                                # delete a user-defined CHAIN
iptables -X                                            # delete all user definied  chains

# P
iptables -P INPUT ACCEPT                               # sets the default POLICY for a chain when no rules matach a request (ACCEPT/DROP)
iptables -P FORWARD DROP                               # Setting the DROP Policy on FORWARD chain
iptables -P OUTPUT ACCEPT                              # Setting the ACCEPT Policy on OUTPUT chain
iptables -P INPUT DROP                                 # Setting the DROP Policy on INPUT chain



# D
iptables -D OUTPUT 2                                   #  deletes a rule, the rule number must be supplied




=============================
= SAVE e RESTORE
==============================

iptables-save                         # returns iptables rules that are  active(from memory)
iptables-save > my_rules.txt          # write active rules(from memory) into file

iptables-restore my_rules.txt         # load rules into memory




# Persist rules on rebioot - UBUNTU / CENTOS
apt-get install iptables-persistent


Debian/Ubuntu: iptables-save > /etc/iptables/rules.v4
RHEL/CentOS: iptables-save > /etc/sysconfig/iptables

Debian/Ubuntu: ip6tables-save > /etc/iptables/rules.v6
RHEL/CentOS: ip6tables-save > /etc/sysconfig/ip6tables


https://www.thomas-krenn.com/en/wiki/Saving_Iptables_Firewall_Rules_Permanently#:~:text=Since%20Ubuntu%2010.04%20LTS%20(Lucid,v6%20for%20IPv6.





=====================
= BASIC matches
====================

# Filer by ip address
iptables  -A INPUT -s <ip> -j DROP                    # drop incoming traffic from specific IP
iptables  -A INPUT -s <domain> -j DROP                # drop incoming traffic from specific domain, iptables will take care of DNS resolution
iptables  -A INPUT -s <networkSubnet> -j DROP         # drop incoming traffic netowrk subnet
iptables  -A INPUT -s 192.168.1.179 -j DROP           # drop incoming traffic from specific IP


sudo iptables -A OUTPUT -d 8.0.0.0/8 -j DROP           # drop ougoing traffic to the all 8.0.0.0 network, all IPs under that nwtwork


iptables -A OUTPUT -p tcp --dport 443   -j ACCEPT           # implicitly | allow outgoing HTTPS traffic to all ips (same as the command below)
iptables -A OUTPUT -p tcp --dport 443  -d 0/0 -j ACCEPT     # explicitly | allow outgoing HTTPS traffic to all ips (same as the command above)


# Filter by IP range
iptables -A INPUT -p tcp --dport 25 -m iprange --src-range 10.0.0.10-10.0.0.18 -j DROP    # DROP smtp traffic (port25) for ip range (incoming)
iptables -A OUTPUT-p tcp --dport 25 -m iprange --src-dst 10.0.0.10-10.0.0.18 -j DROP      # DROP smtp traffic (port25) for ip range (outgoing)


# Filter by network type
iptables -m addrtype --help
iptables -A OUTPUT -m addrtype --dst-type MULTICAST -j DROP


# Filter by port 
iptables -A INPUT -p tcp --dport 22 -j DROP                           # filter by specific port
iptables -A OUTPUT -p tcp -m multiport --dports 80,443 -j ACCEPT      # filter multiple ports with single command


# filter by network interface
iptables -A INPUT -i wlan0 -j ACCEPT        # allow any incoming traffic coming via the wlan0 interface
                                            # -i allowd only for INPUT, FORWARD, PREROUTING
iptables -A INPUT -i wlan+ -j ACCEPT        # the + sign is a wildcard that will match any interfce which string start with wlan                               
                                            # -i alloewd only for INPUT, FORWARD, PREROUTING
                                            
iptables -A OUTPUT -o enp8s0 ACCEPT         # allow any outgoing traffic going trough the enp8s0  interface                            
                                            # -o alloewd only for FORWARD, OUTPUT, POSTROUTING
                                            
# Negating Matches

iptables -A INPUT -p tcp --dport 22 ! -s 100.0.0.1 -j DROP        # dropping all incoming ssh traffic accepting packets from 100.0.0.1 
iptables -A OUTPUT -p tcp --dport 443 ! -d www.linux.com -j DROP  # dropping all outgoing https traffic excepting to www.linux.com
iptables -A INPUT -m mac ! --mac-source b4:6d:83:77:85:f4 -j DROP # dropping all communication excepting that with the default gateway (mac is b4:6d:83:77:85:f4)

 

=============================
= Extras
==============================

sudo apt-get --reinstall install iptables


